{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import '@k2oss/k2-broker-core';\r\n\r\nmetadata = {\r\n    systemName: \"MSExcelPlannerJSSP\",\r\n    displayName: \"Microsoft Excel and Planner\",\r\n    description: \"A connector for Microsoft Excel and Planner\"\r\n};\r\n\r\n// Constants\r\nconst baseUriEndpoint = \"https://graph.microsoft.com/v1.0\";\r\n\r\n//\r\n// Objects\r\nconst Drive = \"drive\";\r\nconst Excel = \"excel\";\r\nconst Group = \"group\";\r\nconst Planner = \"planner\";\r\nconst User = \"user\";\r\n\r\n//\r\n//Drive\r\nconst FileId = \"fileId\";\r\nconst FileWebUrl = \"fileWebUrl\";\r\nconst FileSize = \"fileSize\";\r\nconst FileName = \"fileName\";\r\nconst FileCreated = \"fileCreatedDate\";\r\nconst FileCreatedBy = \"fileCreatedBy\";\r\nconst FileCreatedByEmail = \"fileCreatedByEmail\";\r\nconst FileMimeType = \"fileMimeType\";\r\nconst FilePath = \"filePath\";\r\nconst FolderName = \"folderName\";\r\nconst FolderPath = \"folderPath\";\r\n\r\nconst FileSearch = \"searchFile\";\r\nconst CreateFolder = \"createFolder\";\r\n\r\n//\r\n//Excel\r\nconst ExcelSheetName = \"sheetName\";\r\nconst Column1 = \"column1\";\r\nconst Column2 = \"column2\";\r\nconst Column3 = \"column3\";\r\nconst Column4 = \"column4\";\r\nconst Column5 = \"column5\";\r\nconst Column6 = \"column6\";\r\nconst Column7 = \"column7\";\r\nconst Column8 = \"column8\";\r\nconst Column9 = \"column9\";\r\nconst Column10 = \"column10\";\r\nconst Column11 = \"column11\";\r\nconst Column12 = \"column12\";\r\nconst Column13 = \"column13\";\r\nconst Column14 = \"column14\";\r\nconst Column15 = \"column15\";\r\nconst Column16 = \"column16\";\r\nconst Column17 = \"column17\";\r\nconst Column18 = \"column18\";\r\nconst Column19 = \"column19\";\r\nconst Column20 = \"column20\";\r\nconst ColumnName = \"columnName\";\r\n\r\nconst UsedRangeItems = \"getUsedRangeItems\";\r\nconst GetColumnNames = \"getColumnNames\";\r\n\r\n//\r\n//Group\r\nconst GroupId = \"groupId\";\r\nconst GroupName = \"groupName\";\r\nconst GroupDescription = \"groupDescription\";\r\nconst GroupMail = \"groupMail\";\r\nconst GroupVisibility = \"groupVisibility\";\r\nconst GroupMailNickname = \"groupMailNickname\";\r\nconst GroupMailEnabled = \"groupMailEnabled\";\r\nconst GroupSecurityEnabled = \"groupSecurityEnabled\";\r\nconst GroupOwnerId = \"groupOwnerId\";\r\n\r\nconst GetGroups = \"getGroups\";\r\nconst CreateGroup = \"createGroup\";\r\nconst AddMemberToGroup = \"addMemberToGroup\";\r\n\r\n//\r\n//Planner\r\nconst PlanTitle = \"planTitle\";\r\nconst PlanOwnerGroup = \"ownerGroup\";\r\nconst PlanId = \"planId\";\r\nconst BucketName = \"bucketName\";\r\nconst BucketId = \"bucketId\";\r\nconst TaskId = \"taskId\";\r\nconst TaskTitle = \"taskTitle\";\r\nconst TaskUserId = \"taskUserId\";\r\nconst TaskDueDate = \"taskDueDate\";\r\n\r\nconst CreatePlan = \"createPlan\";\r\nconst CreateBucket = \"createBucket\";\r\nconst GetGroupPlans = \"getGroupPlans\";\r\nconst GetPlanBuckets = \"getPlanBuckets\";\r\nconst CreateTask = \"createTask\";\r\n\r\n//\r\n//User\r\nconst UserEmail = \"userEmail\";\r\nconst UserId = \"userId\";\r\nconst UserDisplayName = \"userDisplayName\";\r\nconst UserGivenName = \"userGivenName\";\r\nconst UserLastName = \"userLastName\";\r\nconst UserJobTitle = \"userJobTitle\";\r\n\r\nconst GetUserByEmail = \"getUserByEmail\";\r\n\r\n//OnDescribe\r\nondescribe = function () {\r\n    postSchema({\r\n\r\n        objects: {\r\n            [Drive]: {\r\n                displayName: \"Drive\",\r\n                description: \"Drive\",\r\n                properties: {\r\n                    [FileId]: {\r\n                        displayName: \"File ID\",\r\n                        description: \"File ID\",\r\n                        type: \"string\"\r\n                    },\r\n                    [FileWebUrl]: {\r\n                        displayName: \"File Web URL\",\r\n                        description: \"File Web URL\",\r\n                        type: \"string\"\r\n                    },\r\n                    [FileSize]: {\r\n                        displayName: \"File Size\",\r\n                        description: \"File Size\",\r\n                        type: \"number\"\r\n                    },\r\n                    [FileName]: {\r\n                        displayName: \"File Name\",\r\n                        description: \"File Name\",\r\n                        type: \"string\"\r\n                    },\r\n                    [FileCreated]: {\r\n                        displayName: \"File Created Date\",\r\n                        description: \"File Created Date\",\r\n                        type: \"dateTime\"\r\n                    },\r\n                    [FileCreatedBy]: {\r\n                        displayName: \"File Created By\",\r\n                        description: \"File Created By\",\r\n                        type: \"string\"\r\n                    },\r\n                    [FileCreatedByEmail]: {\r\n                        displayName: \"File Created By Email\",\r\n                        description: \"File Created By Email\",\r\n                        type: \"string\"\r\n                    },\r\n                    [FileMimeType]: {\r\n                        displayName: \"File Mime Type\",\r\n                        description: \"File Mime Type\",\r\n                        type: \"string\"\r\n                    },\r\n                    [FilePath]: {\r\n                        displayName: \"File Path\",\r\n                        description: \"File Path\",\r\n                        type: \"string\"\r\n                    },\r\n                    [FolderName]: {\r\n                        displayName: \"Folder Name\",\r\n                        description: \"Folder Name\",\r\n                        type: \"string\"\r\n                    },\r\n                    [FolderPath]: {\r\n                        displayName: \"Folder Path\",\r\n                        description: \"Folder Path\",\r\n                        type: \"string\"\r\n                    }\r\n                },\r\n                methods: {\r\n                    [FileSearch]: {\r\n                        displayName: \"Search for a file in my OneDrive\",\r\n                        type: \"read\",\r\n                        inputs: [FileName, FilePath],\r\n                        requiredInputs: [FileName],\r\n                        outputs: [FileId, FileWebUrl, FileSize, FileName, FileCreated, FileCreatedBy, FileCreatedByEmail, FileMimeType]\r\n                    },\r\n                    [CreateFolder]: {\r\n                        displayName: \"Create Folder\",\r\n                        type: \"execute\",\r\n                        inputs: [FolderName, FolderPath],\r\n                        requiredInputs: [FolderName],\r\n                        outputs: []\r\n                    }\r\n                }\r\n            },\r\n            [Excel]: {\r\n                displayName: \"Excel\",\r\n                description: \"Excel\",\r\n                properties: {\r\n                    [FileId]: {\r\n                        displayName: \"File ID\",\r\n                        description: \"File ID\",\r\n                        type: \"string\"\r\n                    },\r\n                    [ExcelSheetName]: {\r\n                        displayName: \"Sheet Name\",\r\n                        description: \"Sheet Name\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column1]: {\r\n                        displayName: \"Column 1\",\r\n                        description: \"Column 1\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column2]: {\r\n                        displayName: \"Column 2\",\r\n                        description: \"Column 2\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column3]: {\r\n                        displayName: \"Column 3\",\r\n                        description: \"Column 3\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column4]: {\r\n                        displayName: \"Column 4\",\r\n                        description: \"Column 4\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column5]: {\r\n                        displayName: \"Column 5\",\r\n                        description: \"Column 5\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column6]: {\r\n                        displayName: \"Column 6\",\r\n                        description: \"Column 6\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column7]: {\r\n                        displayName: \"Column 7\",\r\n                        description: \"Column 7\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column8]: {\r\n                        displayName: \"Column 8\",\r\n                        description: \"Column 8\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column9]: {\r\n                        displayName: \"Column 9\",\r\n                        description: \"Column 9\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column10]: {\r\n                        displayName: \"Column 10\",\r\n                        description: \"Column 10\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column11]: {\r\n                        displayName: \"Column 11\",\r\n                        description: \"Column 11\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column12]: {\r\n                        displayName: \"Column 12\",\r\n                        description: \"Column 12\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column13]: {\r\n                        displayName: \"Column 13\",\r\n                        description: \"Column 13\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column14]: {\r\n                        displayName: \"Column 14\",\r\n                        description: \"Column 14\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column15]: {\r\n                        displayName: \"Column 15\",\r\n                        description: \"Column 15\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column16]: {\r\n                        displayName: \"Column 16\",\r\n                        description: \"Column 16\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column17]: {\r\n                        displayName: \"Column 17\",\r\n                        description: \"Column 17\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column18]: {\r\n                        displayName: \"Column 18\",\r\n                        description: \"Column 18\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column19]: {\r\n                        displayName: \"Column 19\",\r\n                        description: \"Column 19\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column20]: {\r\n                        displayName: \"Column 20\",\r\n                        description: \"Column 20\",\r\n                        type: \"string\"\r\n                    },\r\n                    [ColumnName]: {\r\n                        displayName: \"Column Count\",\r\n                        description: \"Column Count\",\r\n                        type: \"string\"\r\n                    }\r\n                },\r\n                methods: {\r\n                    [UsedRangeItems]: {\r\n                        displayName: \"Get Worksheet Rows in Used Range\",\r\n                        type: \"list\",\r\n                        inputs: [FileId, ExcelSheetName],\r\n                        requiredInputs: [FileId, ExcelSheetName],\r\n                        outputs: [Column1, Column2, Column3, Column4, Column5, Column6, Column7, Column8, Column9, Column10, Column11, Column12, Column13, Column14, Column15, Column16, Column17, Column18, Column19, Column20]\r\n                    },\r\n                    [GetColumnNames]: {\r\n                        displayName: \"Get Column Counts\",\r\n                        type: \"list\",\r\n                        inputs: [FileId, ExcelSheetName],\r\n                        requiredInputs: [FileId, ExcelSheetName],\r\n                        outputs: [ColumnName]\r\n                    }\r\n                }\r\n            },\r\n            [Group]: {\r\n                displayName: \"Group\",\r\n                description: \"Group\",\r\n                properties: {\r\n                    [GroupId]: {\r\n                        displayName: \"Group ID\",\r\n                        description: \"Group ID\",\r\n                        type: \"string\"\r\n                    },\r\n                    [GroupName]: {\r\n                        displayName: \"Group Name\",\r\n                        description: \"Group Name\",\r\n                        type: \"string\"\r\n                    },\r\n                    [GroupDescription]: {\r\n                        displayName: \"Group Description\",\r\n                        description: \"Group Description\",\r\n                        type: \"string\"\r\n                    },\r\n                    [GroupMail]: {\r\n                        displayName: \"Group Mail\",\r\n                        description: \"Group Mail\",\r\n                        type: \"string\"\r\n                    },\r\n                    [GroupVisibility]: {\r\n                        displayName: \"Group Visibility\",\r\n                        description: \"Group Visibility\",\r\n                        type: \"string\"\r\n                    },\r\n                    [GroupMailEnabled]: {\r\n                        displayName: \"Mail Enabled\",\r\n                        description: \"Mail Enabled\",\r\n                        type: \"boolean\"\r\n                    },\r\n                    [GroupMailNickname]: {\r\n                        displayName: \"Mail Nickname\",\r\n                        description: \"Mail Nickname\",\r\n                        type: \"string\"\r\n                    },\r\n                    [GroupSecurityEnabled]: {\r\n                        displayName: \"Security Enabled\",\r\n                        description: \"Security Enabled\",\r\n                        type: \"boolean\"\r\n                    },\r\n                    [GroupOwnerId]: {\r\n                        displayName: \"Group Owner ID\",\r\n                        description: \"Group Owner ID\",\r\n                        type: \"string\"\r\n                    },\r\n                    [UserId]: {\r\n                        displayName: \"User ID\",\r\n                        description: \"User ID\",\r\n                        type: \"string\"\r\n                    }\r\n                },\r\n                methods: {\r\n                    [GetGroups]: {\r\n                        displayName: \"Get all Groups in Organisation\",\r\n                        type: \"list\",\r\n                        inputs: [],\r\n                        requiredInputs: [],\r\n                        outputs: [GroupId, GroupName, GroupDescription, GroupMail, GroupVisibility]\r\n                    },\r\n                    [CreateGroup]: {\r\n                        displayName: \"Create Group\",\r\n                        type: \"execute\",\r\n                        inputs: [GroupName, GroupDescription, GroupVisibility, GroupMailEnabled, GroupMailNickname, GroupSecurityEnabled, GroupOwnerId],\r\n                        requiredInputs: [GroupName, GroupMailEnabled, GroupMailNickname, GroupSecurityEnabled, GroupOwnerId],\r\n                        outputs: [GroupId, GroupName, GroupDescription, GroupMail, GroupVisibility]\r\n                    },\r\n                    [AddMemberToGroup]: {\r\n                        displayName: \"Add Member to Group\",\r\n                        type: \"execute\",\r\n                        inputs: [GroupId, UserId],\r\n                        requiredInputs: [GroupId, UserId],\r\n                        outputs: []\r\n                    }\r\n                }\r\n            },\r\n            [Planner]: {\r\n                displayName: \"Planner\",\r\n                description: \"Planner\",\r\n                properties: {\r\n                    [PlanTitle]: {\r\n                        displayName: \"Planner Title\",\r\n                        description: \"Planner Title\",\r\n                        type: \"string\"\r\n                    },\r\n                    [PlanOwnerGroup]: {\r\n                        displayName: \"Owner Group ID\",\r\n                        description: \"Owner Group ID\",\r\n                        type: \"string\"\r\n                    },\r\n                    [PlanId]: {\r\n                        displayName: \"Plan ID\",\r\n                        description: \"Plan ID\",\r\n                        type: \"string\"\r\n                    },\r\n                    [BucketName]: {\r\n                        displayName: \"Bucket Name\",\r\n                        description: \"Bucket Name\",\r\n                        type: \"string\"\r\n                    },\r\n                    [BucketId]: {\r\n                        displayName: \"Bucket ID\",\r\n                        description: \"Bucket ID\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TaskTitle]: {\r\n                        displayName: \"Task Title\",\r\n                        description: \"Task Title\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TaskUserId]: {\r\n                        displayName: \"Task Assigned To User ID\",\r\n                        description: \"Task Assigned To User ID\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TaskDueDate]: {\r\n                        displayName: \"Task Due Date\",\r\n                        description: \"Task Due Date\",\r\n                        type: \"dateTime\"\r\n                    },\r\n                    [TaskId]: {\r\n                        displayName: \"Task ID\",\r\n                        description: \"Task ID\",\r\n                        type: \"string\"\r\n                    }\r\n                },\r\n                methods: {\r\n                    [CreatePlan]: {\r\n                        displayName: \"Create Plan\",\r\n                        type: \"execute\",\r\n                        inputs: [PlanTitle, PlanOwnerGroup],\r\n                        requiredInputs: [PlanTitle, PlanOwnerGroup],\r\n                        outputs: [PlanId]\r\n                    },\r\n                    [CreateBucket]: {\r\n                        displayName: \"Create Bucket\",\r\n                        type: \"execute\",\r\n                        inputs: [BucketName, PlanId],\r\n                        requiredInputs: [BucketName, PlanId],\r\n                        outputs: [BucketId]\r\n                    },\r\n                    [GetGroupPlans]: {\r\n                        displayName: \"Get Group Plans\",\r\n                        type: \"list\",\r\n                        inputs: [PlanOwnerGroup],\r\n                        requiredInputs: [PlanOwnerGroup],\r\n                        outputs: [PlanId, PlanTitle]\r\n                    },\r\n                    [GetPlanBuckets]: {\r\n                        displayName: \"Get Plan Buckets\",\r\n                        type: \"list\",\r\n                        inputs: [PlanId],\r\n                        requiredInputs: [PlanId],\r\n                        outputs: [BucketId, BucketName]\r\n                    },\r\n                    [CreateTask]: {\r\n                        displayName: \"Create Task\",\r\n                        type: \"execute\",\r\n                        inputs: [PlanId, TaskTitle, TaskUserId, BucketId, TaskDueDate],\r\n                        requiredInputs: [PlanId, TaskTitle, TaskUserId],\r\n                        outputs: [TaskId]\r\n                    }\r\n                }\r\n            },\r\n            [User]: {\r\n                displayName: \"User\",\r\n                description: \"User\",\r\n                properties: {\r\n                    [UserEmail]: {\r\n                        displayName: \"User Email\",\r\n                        description: \"User Email\",\r\n                        type: \"string\"\r\n                    },\r\n                    [UserId]: {\r\n                        displayName: \"User ID\",\r\n                        description: \"User ID\",\r\n                        type: \"string\"\r\n                    },\r\n                    [UserDisplayName]: {\r\n                        displayName: \"User Display Name\",\r\n                        description: \"User Display Name\",\r\n                        type: \"string\"\r\n                    },\r\n                    [UserGivenName]: {\r\n                        displayName: \"User Given Name\",\r\n                        description: \"User Given Name\",\r\n                        type: \"string\"\r\n                    },\r\n                    [UserLastName]: {\r\n                        displayName: \"User Last Name\",\r\n                        description: \"User Last Name\",\r\n                        type: \"string\"\r\n                    },\r\n                    [UserJobTitle]: {\r\n                        displayName: \"User Job Title\",\r\n                        description: \"User Job Title\",\r\n                        type: \"string\"\r\n                    }\r\n                },\r\n                methods: {\r\n                    [GetUserByEmail]: {\r\n                        displayName: \"Get User by Email\",\r\n                        type: \"read\",\r\n                        inputs: [UserEmail],\r\n                        requiredInputs: [UserEmail],\r\n                        outputs: [UserId, UserDisplayName, UserEmail, UserGivenName, UserLastName, UserJobTitle]\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    });\r\n}\r\n\r\n// OnExecute\r\nonexecute = function ({ objectName, methodName, parameters, properties }) {\r\n    switch (objectName) {\r\n        case Drive:\r\n            onexecuteDrive(methodName, parameters, properties);\r\n            break;\r\n        case Excel:\r\n            onexecuteExcel(methodName, parameters, properties);\r\n            break;\r\n        case Group:\r\n            onexecuteGroup(methodName, parameters, properties);\r\n            break;\r\n        case Planner:\r\n            onexecutePlanner(methodName, parameters, properties);\r\n            break;\r\n        case User:\r\n            onexecuteUser(methodName, parameters, properties);\r\n            break;\r\n        default: throw new Error(\"The object \" + objectName + \" is not supported.\");\r\n    }\r\n}\r\n\r\nfunction onexecuteDrive(methodName: string, parameters: SingleRecord, properties: SingleRecord) {\r\n    switch (methodName) {\r\n        case FileSearch:\r\n            onexecuteSearchFile(parameters, properties);\r\n            break;\r\n        case CreateFolder:\r\n            onexecuteCreateFolder(parameters, properties);\r\n            break;\r\n        default: throw new Error(\"The method \" + methodName + \" is not supported..\");\r\n    }\r\n}\r\n\r\nfunction onexecuteExcel(methodName: string, parameters: SingleRecord, properties: SingleRecord) {\r\n    switch (methodName) {\r\n        case UsedRangeItems:\r\n            onexecuteUsedRange(parameters, properties);\r\n            break;\r\n        case GetColumnNames:\r\n            onexecuteGetColumnNames(parameters, properties);\r\n            break;\r\n        default: throw new Error(\"The method \" + methodName + \" is not supported..\");\r\n    }\r\n}\r\n\r\nfunction onexecuteGroup(methodName: string, parameters: SingleRecord, properties: SingleRecord) {\r\n    switch (methodName) {\r\n        case GetGroups:\r\n            onexecuteGetGroups(parameters, properties);\r\n            break;\r\n        case CreateGroup:\r\n            onexecuteCreateGroup(parameters, properties);\r\n            break;\r\n        case AddMemberToGroup:\r\n            onexecuteAddUserToGroup(parameters, properties);\r\n            break;\r\n        default: throw new Error(\"The method \" + methodName + \" is not supported..\");\r\n    }\r\n}\r\n\r\nfunction onexecutePlanner(methodName: string, parameters: SingleRecord, properties: SingleRecord) {\r\n    switch (methodName) {\r\n        case CreatePlan:\r\n            onexecuteCreatePlan(parameters, properties);\r\n            break;\r\n        case CreateBucket:\r\n            onexecuteCreateBucket(parameters, properties);\r\n            break;\r\n        case GetGroupPlans:\r\n            onexecuteGetPlans(parameters, properties);\r\n            break;\r\n        case GetPlanBuckets:\r\n            onexecuteGetBuckets(parameters, properties);\r\n            break;\r\n        case CreateTask:\r\n            onexecuteCreateTask(parameters, properties);\r\n            break;\r\n        default: throw new Error(\"The method \" + methodName + \" is not supported..\");\r\n    }\r\n}\r\n\r\nfunction onexecuteUser(methodName: string, parameters: SingleRecord, properties: SingleRecord) {\r\n    switch (methodName) {\r\n        case GetUserByEmail:\r\n            onexecuteGetUser(parameters, properties);\r\n            break;\r\n        default: throw new Error(\"The method \" + methodName + \" is not supported..\");\r\n    }\r\n}\r\n\r\nfunction ExecuteRequest(url: string, data: string, requestType: string, cb) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange = function () {\r\n        console.log(\"ExecuteRequest XHR status: \" + xhr.status + \",\" + xhr.responseText);\r\n        if (xhr.readyState !== 4)\r\n            return;\r\n        if (xhr.status == 201) {\r\n            //console.log(\"ExecuteRequest XHR status: \" + xhr.status + \",\" + xhr.responseText);\r\n            var obj;\r\n\r\n            try {\r\n                obj = JSON.parse(xhr.responseText);\r\n            }\r\n            catch (e) {\r\n                //do nothing\r\n            }\r\n\r\n            if (typeof cb === 'function')\r\n                cb(obj);\r\n        }\r\n        else if (xhr.status == 204) {\r\n            if (typeof cb === 'function')\r\n                cb(xhr.responseText);\r\n        }\r\n        else if (xhr.status == 200) {\r\n            var obj = JSON.parse(xhr.responseText);\r\n            //console.log(\"ExecuteRequest XHR status: \" + xhr.status + \",\" + xhr.responseText);\r\n            //console.log(\"ExecuteRequest cb type of: \" + (typeof cb).toString());\r\n            if (typeof cb === 'function')\r\n                cb(obj);\r\n        }\r\n        else if (xhr.status == 202) {\r\n            if (typeof cb === 'function')\r\n                cb(null);\r\n        }\r\n        else if (xhr.status == 400) {\r\n            // This is a bad request, return error to UI\r\n            var obj = JSON.parse(xhr.responseText);\r\n            throw new Error(obj.error.code + \": \" + obj.error.message);\r\n        }\r\n        else if (xhr.status == 404) {\r\n            var obj = JSON.parse(xhr.responseText);\r\n            // This is to supress an error that happens with team archive/unarchive\r\n            var errorMessage = obj.error.message;\r\n            if (errorMessage.startswith == \"No Team found with Group id\") {\r\n                // do nothing - supress error\r\n            }\r\n            else {\r\n                throw new Error(obj.error.code + \": \" + obj.error.message);\r\n            }\r\n            //console.log(\"MSTeamsConnector ExecuteRequest: Failed with 404 error.\");\r\n            //throw new Error(obj.error.code + \" error: \" + obj.error.message);\r\n            //console.log(\"Failed with status \" + xhr.status + \" \" + xhr.responseText);\r\n        }\r\n        else {\r\n            postResult({\r\n                //TeamIsSuccessful: false\r\n            });\r\n            var obj = JSON.parse(xhr.responseText);\r\n            throw new Error(obj.error.code + \": \" + obj.error.message);\r\n            //console.log(\"Failed with status \" + xhr.status + \" \" + xhr.responseText);\r\n\r\n        }\r\n    };\r\n    console.log(\"MSTeamsConnector ExecuteRequest: \" + url);\r\n    xhr.open(requestType.toUpperCase(), url);\r\n    // Authentication Header\r\n    xhr.withCredentials = true;\r\n    xhr.setRequestHeader(\"Accept\", \"application/json\");\r\n    if (requestType.toUpperCase() == \"PUT\" || requestType.toUpperCase() == \"POST\" || requestType.toUpperCase() == \"PATCH\") {\r\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n    }\r\n    xhr.send(data);\r\n}\r\n\r\n\r\nfunction onexecuteSearchFile(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetDriveFile(parameters, properties, function (a) {\r\n        var resultObj = {\r\n            [FileId]: \"\",\r\n            [FileWebUrl]: \"\",\r\n            [FileSize]: 0,\r\n            [FileName]: \"\",\r\n            [FileCreated]: null,\r\n            [FileCreatedBy]: \"\",\r\n            [FileCreatedByEmail]: \"\",\r\n            [FileMimeType]: \"\"\r\n        };\r\n\r\n        if (a.value.length > 0) {\r\n            resultObj[FileId] = a.value[0].id;\r\n            resultObj[FileWebUrl] = a.value[0].webUrl;\r\n            resultObj[FileSize] = a.value[0].size;\r\n            resultObj[FileName] = a.value[0].name;\r\n            resultObj[FileCreated] = Date.parse(a.value[0].createdDateTime);\r\n            resultObj[FileCreatedBy] = a.value[0].createdBy.user.displayName;\r\n            resultObj[FileCreatedByEmail] = a.value[0].createdBy.user.email;\r\n            resultObj[FileMimeType] = a.value[0].file.mimeType;\r\n        }\r\n\r\n        postResult(resultObj);\r\n    });\r\n}\r\n\r\nfunction GetDriveFile(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let fileName = properties[FileName];\r\n    let filePath = properties[FilePath];\r\n    if (!(typeof fileName === \"string\")) throw new Error(\"properties[FileName] is not of type string\");\r\n\r\n    var url;\r\n    if ((typeof filePath === \"string\") && (filePath != \"\")) {\r\n        url = baseUriEndpoint + `/me/drive/root:/${filePath}:/search(q='${fileName}')`;\r\n    }\r\n    else {\r\n        url = baseUriEndpoint + `/me/drive/root/search(q='${fileName}')`;\r\n    }\r\n\r\n    ExecuteRequest(url, null, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteCreateFolder(parameters: SingleRecord, properties: SingleRecord) {\r\n    CreateDriveFolder(parameters, properties, function () {\r\n        //postResult({});\r\n    });\r\n}\r\n\r\nfunction CreateDriveFolder(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let folderName = properties[FolderName];\r\n    let folderPath = properties[FolderPath];\r\n\r\n    if (!(typeof folderName === \"string\")) throw new Error(\"properties[FolderName] is not of type string\");\r\n\r\n    var url;\r\n    if ((typeof folderPath === \"string\") && (folderPath != \"\")) {\r\n        url = baseUriEndpoint + `/me/drive/root:/${folderPath}:/children'`;\r\n    }\r\n    else {\r\n        url = baseUriEndpoint + `/me/drive/root/children`;\r\n    }\r\n\r\n    var data = {\r\n        \"name\": folderName,\r\n        \"folder\": {},\r\n        \"@microsoft.graph.conflictBehavior\": \"replace\"\r\n    };\r\n\r\n    ExecuteRequest(url, JSON.stringify(data), \"POST\", function () {\r\n        if (typeof cb === 'function')\r\n            cb();\r\n    });\r\n}\r\n\r\nfunction onexecuteUsedRange(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetRangeItems(parameters, properties, function (a) {\r\n        var obj = a.text.map(x => {\r\n            var obj = {};\r\n\r\n            for (var i = 0; i < x.length; i++) {\r\n                if ((i + 1) < 21) {\r\n                    obj[\"column\" + (i + 1)] = x[i];\r\n                }\r\n            }\r\n            return obj;\r\n        });\r\n\r\n        postResult(obj);\r\n    });\r\n}\r\n\r\nfunction GetRangeItems(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let fileId = properties[FileId];\r\n    let sheetName = properties[ExcelSheetName];\r\n\r\n    if (!(typeof fileId === \"string\")) throw new Error(\"properties[FileId] is not of type string\");\r\n    if (!(typeof sheetName === \"string\")) throw new Error(\"properties[ExcelSheetName] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + `/me/drive/items/${fileId}/workbook/worksheets('${sheetName}')/usedRange`;\r\n\r\n    ExecuteRequest(url, null, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteGetColumnNames(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetRangeItems(parameters, properties, function (a) {\r\n        \r\n        var count = 0;\r\n        var objArr = [];\r\n\r\n        if (a.text.length > 0)\r\n        {\r\n            count = a.text[0].length;\r\n\r\n            for (var i = 1; i < count + 1; i++)\r\n            {\r\n                objArr.push({\r\n                    [ColumnName]: i\r\n                });\r\n            }\r\n        }\r\n\r\n        postResult(objArr);\r\n    });\r\n}\r\n\r\nfunction onexecuteGetGroups(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetGroupItems(parameters, properties, function (a) {\r\n        postResult(a.value.map(x => {\r\n            return {\r\n                [GroupId]: x.id,\r\n                [GroupName]: x.displayName,\r\n                [GroupDescription]: x.description,\r\n                [GroupMail]: x.mail,\r\n                [GroupVisibility]: x.visibility\r\n            };\r\n        }));\r\n    });\r\n}\r\n\r\nfunction GetGroupItems(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    var url = baseUriEndpoint + '/groups';\r\n\r\n    ExecuteRequest(url, null, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteCreatePlan(parameters: SingleRecord, properties: SingleRecord) {\r\n    CreatePlannerPlan(parameters, properties, function (a) {\r\n        postResult({\r\n            [PlanId]: a.id\r\n        });\r\n    });\r\n}\r\n\r\nfunction CreatePlannerPlan(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let planTitle = properties[PlanTitle];\r\n    let planGroup = properties[PlanOwnerGroup];\r\n\r\n    if (!(typeof planTitle === \"string\")) throw new Error(\"properties[PlanTitle] is not of type string\");\r\n    if (!(typeof planGroup === \"string\")) throw new Error(\"properties[PlanOwnerGroup] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + '/planner/plans';\r\n\r\n    var data = {\r\n        title: planTitle,\r\n        owner: planGroup\r\n    };\r\n\r\n    ExecuteRequest(url, JSON.stringify(data), \"POST\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteCreateBucket(parameters: SingleRecord, properties: SingleRecord) {\r\n    CreatePlannerPlanBucket(parameters, properties, function (a) {\r\n        postResult({\r\n            [BucketId]: a.id\r\n        });\r\n    });\r\n}\r\n\r\nfunction CreatePlannerPlanBucket(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let bucketName = properties[BucketName];\r\n    let planId = properties[PlanId];\r\n\r\n    if (!(typeof bucketName === \"string\")) throw new Error(\"properties[BucketName] is not of type string\");\r\n    if (!(typeof planId === \"string\")) throw new Error(\"properties[PlanId] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + '/planner/buckets';\r\n\r\n    var data = {\r\n        name: bucketName,\r\n        planId: planId\r\n    };\r\n\r\n    ExecuteRequest(url, JSON.stringify(data), \"POST\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteCreateGroup(parameters: SingleRecord, properties: SingleRecord) {\r\n    CreateNewGroup(parameters, properties, function (a) {\r\n        postResult({\r\n            [GroupId]: a.id,\r\n            [GroupName]: a.displayName,\r\n            [GroupDescription]: a.description,\r\n            [GroupMail]: a.mail,\r\n            [GroupVisibility]: a.visibility\r\n        });\r\n    });\r\n}\r\n\r\nfunction CreateNewGroup(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let groupName = properties[GroupName];\r\n    let groupDesc = properties[GroupDescription];\r\n    let groupVisibility = properties[GroupVisibility];\r\n    let groupMailEnabled = properties[GroupMailEnabled];\r\n    let groupMailNic = properties[GroupMailNickname];\r\n    let groupSecurityEnabled = properties[GroupSecurityEnabled];\r\n    let groupOwnerId = properties[GroupOwnerId];\r\n\r\n\r\n    if (!(typeof groupName === \"string\")) throw new Error(\"properties[GroupName] is not of type string\");\r\n    if (!(typeof groupMailNic === \"string\")) throw new Error(\"properties[GroupMailNickname] is not of type string\");\r\n    if (!(typeof groupOwnerId === \"string\")) throw new Error(\"properties[GroupOwnerId] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + '/groups';\r\n\r\n    var data = {\r\n        displayName: groupName,\r\n        mailEnabled: groupMailEnabled,\r\n        mailNickname: groupMailNic,\r\n        securityEnabled: groupSecurityEnabled,\r\n        description: groupDesc,\r\n        visibility: (groupVisibility != null && groupVisibility != \"\") ? groupVisibility : \"Public\",\r\n        groupTypes: [\"Unified\"],\r\n        \"owners@odata.bind\": [\r\n            `https://graph.microsoft.com/v1.0/users/${groupOwnerId}`\r\n        ]\r\n    };\r\n\r\n    ExecuteRequest(url, JSON.stringify(data), \"POST\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteGetUser(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetGroupUserByEmail(parameters, properties, function (a) {\r\n        postResult({\r\n            [UserId]: a.id,\r\n            [UserDisplayName]: a.displayName,\r\n            [UserEmail]: a.mail,\r\n            [UserGivenName]: a.givenName,\r\n            [UserLastName]: a.surname,\r\n            [UserJobTitle]: a.jobTitle\r\n        });\r\n    });\r\n}\r\n\r\nfunction GetGroupUserByEmail(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let userMail = properties[UserEmail];\r\n\r\n    if (!(typeof userMail === \"string\")) throw new Error(\"properties[UserEmail] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + `/users/${userMail}`;\r\n\r\n    ExecuteRequest(url, null, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteAddUserToGroup(parameters: SingleRecord, properties: SingleRecord) {\r\n    AddUser(parameters, properties, function (a) {\r\n        postResult({});\r\n    });\r\n}\r\n\r\nfunction AddUser(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let groupId = properties[GroupId];\r\n    let userId = properties[UserId];\r\n\r\n    if (!(typeof groupId === \"string\")) throw new Error(\"properties[GroupId] is not of type string\");\r\n    if (!(typeof userId === \"string\")) throw new Error(\"properties[UserId] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + `/groups/${groupId}/members/$ref`;\r\n\r\n    var data = {\r\n        \"@odata.id\": `https://graph.microsoft.com/v1.0/directoryObjects/${userId}`\r\n    };\r\n\r\n    ExecuteRequest(url, JSON.stringify(data), \"POST\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteGetPlans(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetPlans(parameters, properties, function (a) {\r\n        postResult(a.value.map(x => {\r\n            return {\r\n                [PlanId]: x.id,\r\n                [PlanTitle]: x.title\r\n            };\r\n        }));\r\n    });\r\n}\r\n\r\nfunction GetPlans(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let groupId = properties[PlanOwnerGroup];\r\n\r\n    if (!(typeof groupId === \"string\")) throw new Error(\"properties[PlanOwnerGroup] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + `/groups/${groupId}/planner/plans`;\r\n\r\n    ExecuteRequest(url, null, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteGetBuckets(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetBuckets(parameters, properties, function (a) {\r\n        postResult(a.value.map(x => {\r\n            return {\r\n                [BucketId]: x.id,\r\n                [BucketName]: x.name\r\n            };\r\n        }));\r\n    });\r\n}\r\n\r\nfunction GetBuckets(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let planId = properties[PlanId];\r\n\r\n    if (!(typeof planId === \"string\")) throw new Error(\"properties[PlanId] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + `/planner/plans/${planId}/buckets`;\r\n\r\n    ExecuteRequest(url, null, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteCreateTask(parameters: SingleRecord, properties: SingleRecord) {\r\n    CreatePlanTask(parameters, properties, function (a) {\r\n        postResult({\r\n            [TaskId]: a.id\r\n        });\r\n    });\r\n}\r\n\r\nfunction CreatePlanTask(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let planId = properties[PlanId];\r\n    let taskUserId = properties[TaskUserId];\r\n    let taskTitle = properties[TaskTitle];\r\n    let taskDueDate = properties[TaskDueDate] != null && properties[TaskDueDate] != \"\" ? properties[TaskDueDate].toString() : \"\";\r\n    let bucketId = properties[BucketId];\r\n\r\n    if (taskDueDate != \"\") {\r\n        taskDueDate = new Date(taskDueDate).toISOString().split(\"T\")[0];\r\n    }\r\n\r\n    if (!(typeof planId === \"string\")) throw new Error(\"properties[PlanId] is not of type string\");\r\n    if (!(typeof taskUserId === \"string\")) throw new Error(\"properties[TaskUserId] is not of type string\");\r\n    if (!(typeof taskTitle === \"string\")) throw new Error(\"properties[TaskTitle] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + '/planner/tasks';\r\n\r\n    var data = `{\\\"planId\\\":\\\"${planId}\\\",\\\"title\\\":\\\"${taskTitle}\\\",\\\"dueDateTime\\\":\\\"${taskDueDate}\\\",\\\"bucketId\\\":\\\"${bucketId}\\\",\\\"assignments\\\":{\\\"${taskUserId}\\\":{\\\"@odata.type\\\":\\\"#microsoft.graph.plannerAssignment\\\",\\\"orderHint\\\":\\\" !\\\"}}}`;\r\n\r\n    ExecuteRequest(url, data, \"POST\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}"],"names":["metadata","systemName","displayName","description","baseUriEndpoint","FileId","PlanId","ExecuteRequest","url","data","requestType","cb","xhr","XMLHttpRequest","onreadystatechange","console","log","status","responseText","readyState","obj","JSON","parse","e","Error","error","code","message","postResult","startswith","open","toUpperCase","withCredentials","setRequestHeader","send","GetRangeItems","parameters","properties","fileId","sheetName","ondescribe","postSchema","objects","type","methods","inputs","requiredInputs","outputs","onexecute","objectName","methodName","fileName","filePath","GetDriveFile","a","resultObj","value","length","id","webUrl","size","name","Date","createdDateTime","createdBy","user","email","file","mimeType","onexecuteSearchFile","folderName","folderPath","stringify","CreateDriveFolder","onexecuteCreateFolder","onexecuteDrive","text","map","x","i","onexecuteUsedRange","count","objArr","push","onexecuteGetColumnNames","onexecuteExcel","mail","visibility","groupName","groupDesc","groupVisibility","groupMailEnabled","groupMailNic","groupSecurityEnabled","groupOwnerId","mailEnabled","mailNickname","securityEnabled","groupTypes","CreateNewGroup","onexecuteCreateGroup","groupId","userId","AddUser","onexecuteAddUserToGroup","onexecuteGroup","planTitle","planGroup","title","owner","CreatePlannerPlan","onexecuteCreatePlan","bucketName","planId","CreatePlannerPlanBucket","onexecuteCreateBucket","GetPlans","onexecuteGetPlans","GetBuckets","onexecuteGetBuckets","taskUserId","taskTitle","taskDueDate","toString","bucketId","toISOString","split","CreatePlanTask","onexecuteCreateTask","onexecutePlanner","userMail","GetGroupUserByEmail","givenName","surname","jobTitle","onexecuteGetUser","onexecuteUser"],"mappings":"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"}