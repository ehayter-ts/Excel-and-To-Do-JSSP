{"version":3,"file":"run.js","sources":["../src/index.ts","../src/run.ts"],"sourcesContent":["import '@k2oss/k2-broker-core';\r\n\r\nmetadata = {\r\n    systemName: \"MSExcelPlannerJSSP\",\r\n    displayName: \"Microsoft Excel and Planner\",\r\n    description: \"A connector for Microsoft Excel and Planner\"\r\n};\r\n\r\n// Constants\r\nconst baseUriEndpoint = \"https://graph.microsoft.com/v1.0\";\r\n\r\n//\r\n// Objects\r\nconst Drive = \"drive\";\r\nconst Excel = \"excel\";\r\nconst Group = \"group\";\r\nconst Planner = \"planner\";\r\nconst User = \"user\";\r\n\r\n//\r\n//Drive\r\nconst FileId = \"fileId\";\r\nconst FileWebUrl = \"fileWebUrl\";\r\nconst FileSize = \"fileSize\";\r\nconst FileName = \"fileName\";\r\nconst FileCreated = \"fileCreatedDate\";\r\nconst FileCreatedBy = \"fileCreatedBy\";\r\nconst FileCreatedByEmail = \"fileCreatedByEmail\";\r\nconst FileMimeType = \"fileMimeType\";\r\nconst FilePath = \"filePath\";\r\nconst FolderName = \"folderName\";\r\nconst FolderPath = \"folderPath\";\r\n\r\nconst FileSearch = \"searchFile\";\r\nconst CreateFolder = \"createFolder\";\r\n\r\n//\r\n//Excel\r\nconst ExcelSheetName = \"sheetName\";\r\nconst Column1 = \"column1\";\r\nconst Column2 = \"column2\";\r\nconst Column3 = \"column3\";\r\nconst Column4 = \"column4\";\r\nconst Column5 = \"column5\";\r\nconst Column6 = \"column6\";\r\nconst Column7 = \"column7\";\r\nconst Column8 = \"column8\";\r\nconst Column9 = \"column9\";\r\nconst Column10 = \"column10\";\r\nconst Column11 = \"column11\";\r\nconst Column12 = \"column12\";\r\nconst Column13 = \"column13\";\r\nconst Column14 = \"column14\";\r\nconst Column15 = \"column15\";\r\nconst Column16 = \"column16\";\r\nconst Column17 = \"column17\";\r\nconst Column18 = \"column18\";\r\nconst Column19 = \"column19\";\r\nconst Column20 = \"column20\";\r\n\r\nconst UsedRangeItems = \"getUsedRangeItems\";\r\n\r\n//\r\n//Group\r\nconst GroupId = \"groupId\";\r\nconst GroupName = \"groupName\";\r\nconst GroupDescription = \"groupDescription\";\r\nconst GroupMail = \"groupMail\";\r\nconst GroupVisibility = \"groupVisibility\";\r\nconst GroupMailNickname = \"groupMailNickname\";\r\nconst GroupMailEnabled = \"groupMailEnabled\";\r\nconst GroupSecurityEnabled = \"groupSecurityEnabled\";\r\nconst GroupOwnerId = \"groupOwnerId\";\r\n\r\nconst GetGroups = \"getGroups\";\r\nconst CreateGroup = \"createGroup\";\r\nconst AddMemberToGroup = \"addMemberToGroup\";\r\n\r\n//\r\n//Planner\r\nconst PlanTitle = \"planTitle\";\r\nconst PlanOwnerGroup = \"ownerGroup\";\r\nconst PlanId = \"planId\";\r\nconst BucketName = \"bucketName\";\r\nconst BucketId = \"bucketId\";\r\nconst TaskId = \"taskId\";\r\nconst TaskTitle = \"taskTitle\";\r\nconst TaskUserId = \"taskUserId\";\r\nconst TaskDueDate = \"taskDueDate\";\r\n\r\nconst CreatePlan = \"createPlan\";\r\nconst CreateBucket = \"createBucket\";\r\nconst GetGroupPlans = \"getGroupPlans\";\r\nconst GetPlanBuckets = \"getPlanBuckets\";\r\nconst CreateTask = \"createTask\";\r\n\r\n//\r\n//User\r\nconst UserEmail = \"userEmail\";\r\nconst UserId = \"userId\";\r\nconst UserDisplayName = \"userDisplayName\";\r\nconst UserGivenName = \"userGivenName\";\r\nconst UserLastName = \"userLastName\";\r\nconst UserJobTitle = \"userJobTitle\";\r\n\r\nconst GetUserByEmail = \"getUserByEmail\";\r\n\r\n//OnDescribe\r\nondescribe = function () {\r\n    postSchema({\r\n\r\n        objects: {\r\n            [Drive]: {\r\n                displayName: \"Drive\",\r\n                description: \"Drive\",\r\n                properties: {\r\n                    [FileId]: {\r\n                        displayName: \"File ID\",\r\n                        description: \"File ID\",\r\n                        type: \"string\"\r\n                    },\r\n                    [FileWebUrl]: {\r\n                        displayName: \"File Web URL\",\r\n                        description: \"File Web URL\",\r\n                        type: \"string\"\r\n                    },\r\n                    [FileSize]: {\r\n                        displayName: \"File Size\",\r\n                        description: \"File Size\",\r\n                        type: \"number\"\r\n                    },\r\n                    [FileName]: {\r\n                        displayName: \"File Name\",\r\n                        description: \"File Name\",\r\n                        type: \"string\"\r\n                    },\r\n                    [FileCreated]: {\r\n                        displayName: \"File Created Date\",\r\n                        description: \"File Created Date\",\r\n                        type: \"dateTime\"\r\n                    },\r\n                    [FileCreatedBy]: {\r\n                        displayName: \"File Created By\",\r\n                        description: \"File Created By\",\r\n                        type: \"string\"\r\n                    },\r\n                    [FileCreatedByEmail]: {\r\n                        displayName: \"File Created By Email\",\r\n                        description: \"File Created By Email\",\r\n                        type: \"string\"\r\n                    },\r\n                    [FileMimeType]: {\r\n                        displayName: \"File Mime Type\",\r\n                        description: \"File Mime Type\",\r\n                        type: \"string\"\r\n                    },\r\n                    [FilePath]: {\r\n                        displayName: \"File Path\",\r\n                        description: \"File Path\",\r\n                        type: \"string\"\r\n                    },\r\n                    [FolderName]: {\r\n                        displayName: \"Folder Name\",\r\n                        description: \"Folder Name\",\r\n                        type: \"string\"\r\n                    },\r\n                    [FolderPath]: {\r\n                        displayName: \"Folder Path\",\r\n                        description: \"Folder Path\",\r\n                        type: \"string\"\r\n                    }\r\n                },\r\n                methods: {\r\n                    [FileSearch]: {\r\n                        displayName: \"Search for a file in my OneDrive\",\r\n                        type: \"read\",\r\n                        inputs: [FileName, FilePath],\r\n                        requiredInputs: [FileName],\r\n                        outputs: [FileId, FileWebUrl, FileSize, FileName, FileCreated, FileCreatedBy, FileCreatedByEmail, FileMimeType]\r\n                    },\r\n                    [CreateFolder]: {\r\n                        displayName: \"Create Folder\",\r\n                        type: \"execute\",\r\n                        inputs: [FolderName, FolderPath],\r\n                        requiredInputs: [FolderName],\r\n                        outputs: []\r\n                    }\r\n                }\r\n            },\r\n            [Excel]: {\r\n                displayName: \"Excel\",\r\n                description: \"Excel\",\r\n                properties: {\r\n                    [FileId]: {\r\n                        displayName: \"File ID\",\r\n                        description: \"File ID\",\r\n                        type: \"string\"\r\n                    },\r\n                    [ExcelSheetName]: {\r\n                        displayName: \"Sheet Name\",\r\n                        description: \"Sheet Name\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column1]: {\r\n                        displayName: \"Column 1\",\r\n                        description: \"Column 1\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column2]: {\r\n                        displayName: \"Column 2\",\r\n                        description: \"Column 2\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column3]: {\r\n                        displayName: \"Column 3\",\r\n                        description: \"Column 3\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column4]: {\r\n                        displayName: \"Column 4\",\r\n                        description: \"Column 4\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column5]: {\r\n                        displayName: \"Column 5\",\r\n                        description: \"Column 5\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column6]: {\r\n                        displayName: \"Column 6\",\r\n                        description: \"Column 6\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column7]: {\r\n                        displayName: \"Column 7\",\r\n                        description: \"Column 7\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column8]: {\r\n                        displayName: \"Column 8\",\r\n                        description: \"Column 8\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column9]: {\r\n                        displayName: \"Column 9\",\r\n                        description: \"Column 9\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column10]: {\r\n                        displayName: \"Column 10\",\r\n                        description: \"Column 10\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column11]: {\r\n                        displayName: \"Column 11\",\r\n                        description: \"Column 11\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column12]: {\r\n                        displayName: \"Column 12\",\r\n                        description: \"Column 12\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column13]: {\r\n                        displayName: \"Column 13\",\r\n                        description: \"Column 13\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column14]: {\r\n                        displayName: \"Column 14\",\r\n                        description: \"Column 14\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column15]: {\r\n                        displayName: \"Column 15\",\r\n                        description: \"Column 15\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column16]: {\r\n                        displayName: \"Column 16\",\r\n                        description: \"Column 16\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column17]: {\r\n                        displayName: \"Column 17\",\r\n                        description: \"Column 17\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column18]: {\r\n                        displayName: \"Column 18\",\r\n                        description: \"Column 18\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column19]: {\r\n                        displayName: \"Column 19\",\r\n                        description: \"Column 19\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column20]: {\r\n                        displayName: \"Column 20\",\r\n                        description: \"Column 20\",\r\n                        type: \"string\"\r\n                    }\r\n                },\r\n                methods: {\r\n                    [UsedRangeItems]: {\r\n                        displayName: \"Get Worksheet Rows in Used Range\",\r\n                        type: \"list\",\r\n                        inputs: [FileId, ExcelSheetName],\r\n                        requiredInputs: [FileId, ExcelSheetName],\r\n                        outputs: [Column1, Column2, Column3, Column4, Column5, Column6, Column7, Column8, Column9, Column10, Column11, Column12, Column13, Column14, Column15, Column16, Column17, Column18, Column19, Column20]\r\n                    }\r\n                }\r\n            },\r\n            [Group]: {\r\n                displayName: \"Group\",\r\n                description: \"Group\",\r\n                properties: {\r\n                    [GroupId]: {\r\n                        displayName: \"Group ID\",\r\n                        description: \"Group ID\",\r\n                        type: \"string\"\r\n                    },\r\n                    [GroupName]: {\r\n                        displayName: \"Group Name\",\r\n                        description: \"Group Name\",\r\n                        type: \"string\"\r\n                    },\r\n                    [GroupDescription]: {\r\n                        displayName: \"Group Description\",\r\n                        description: \"Group Description\",\r\n                        type: \"string\"\r\n                    },\r\n                    [GroupMail]: {\r\n                        displayName: \"Group Mail\",\r\n                        description: \"Group Mail\",\r\n                        type: \"string\"\r\n                    },\r\n                    [GroupVisibility]: {\r\n                        displayName: \"Group Visibility\",\r\n                        description: \"Group Visibility\",\r\n                        type: \"string\"\r\n                    },\r\n                    [GroupMailEnabled]: {\r\n                        displayName: \"Mail Enabled\",\r\n                        description: \"Mail Enabled\",\r\n                        type: \"boolean\"\r\n                    },\r\n                    [GroupMailNickname]: {\r\n                        displayName: \"Mail Nickname\",\r\n                        description: \"Mail Nickname\",\r\n                        type: \"string\"\r\n                    },\r\n                    [GroupSecurityEnabled]: {\r\n                        displayName: \"Security Enabled\",\r\n                        description: \"Security Enabled\",\r\n                        type: \"boolean\"\r\n                    },\r\n                    [GroupOwnerId]: {\r\n                        displayName: \"Group Owner ID\",\r\n                        description: \"Group Owner ID\",\r\n                        type: \"string\"\r\n                    },\r\n                    [UserId]: {\r\n                        displayName: \"User ID\",\r\n                        description: \"User ID\",\r\n                        type: \"string\"\r\n                    }\r\n                },\r\n                methods: {\r\n                    [GetGroups]: {\r\n                        displayName: \"Get all Groups in Organisation\",\r\n                        type: \"list\",\r\n                        inputs: [],\r\n                        requiredInputs: [],\r\n                        outputs: [GroupId, GroupName, GroupDescription, GroupMail, GroupVisibility]\r\n                    },\r\n                    [CreateGroup]: {\r\n                        displayName: \"Create Group\",\r\n                        type: \"execute\",\r\n                        inputs: [GroupName, GroupDescription, GroupVisibility, GroupMailEnabled, GroupMailNickname, GroupSecurityEnabled, GroupOwnerId],\r\n                        requiredInputs: [GroupName, GroupMailEnabled, GroupMailNickname, GroupSecurityEnabled, GroupOwnerId],\r\n                        outputs: [GroupId, GroupName, GroupDescription, GroupMail, GroupVisibility]\r\n                    },\r\n                    [AddMemberToGroup]: {\r\n                        displayName: \"Add Member to Group\",\r\n                        type: \"execute\",\r\n                        inputs: [GroupId, UserId],\r\n                        requiredInputs: [GroupId, UserId],\r\n                        outputs: []\r\n                    }\r\n                }\r\n            },\r\n            [Planner]: {\r\n                displayName: \"Planner\",\r\n                description: \"Planner\",\r\n                properties: {\r\n                    [PlanTitle]: {\r\n                        displayName: \"Planner Title\",\r\n                        description: \"Planner Title\",\r\n                        type: \"string\"\r\n                    },\r\n                    [PlanOwnerGroup]: {\r\n                        displayName: \"Owner Group ID\",\r\n                        description: \"Owner Group ID\",\r\n                        type: \"string\"\r\n                    },\r\n                    [PlanId]: {\r\n                        displayName: \"Plan ID\",\r\n                        description: \"Plan ID\",\r\n                        type: \"string\"\r\n                    },\r\n                    [BucketName]: {\r\n                        displayName: \"Bucket Name\",\r\n                        description: \"Bucket Name\",\r\n                        type: \"string\"\r\n                    },\r\n                    [BucketId]: {\r\n                        displayName: \"Bucket ID\",\r\n                        description: \"Bucket ID\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TaskTitle]: {\r\n                        displayName: \"Task Title\",\r\n                        description: \"Task Title\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TaskUserId]: {\r\n                        displayName: \"Task Assigned To User ID\",\r\n                        description: \"Task Assigned To User ID\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TaskDueDate]: {\r\n                        displayName: \"Task Due Date\",\r\n                        description: \"Task Due Date\",\r\n                        type: \"dateTime\"\r\n                    },\r\n                    [TaskId]: {\r\n                        displayName: \"Task ID\",\r\n                        description: \"Task ID\",\r\n                        type: \"string\"\r\n                    }\r\n                },\r\n                methods: {\r\n                    [CreatePlan]: {\r\n                        displayName: \"Create Plan\",\r\n                        type: \"execute\",\r\n                        inputs: [PlanTitle, PlanOwnerGroup],\r\n                        requiredInputs: [PlanTitle, PlanOwnerGroup],\r\n                        outputs: [PlanId]\r\n                    },\r\n                    [CreateBucket]: {\r\n                        displayName: \"Create Bucket\",\r\n                        type: \"execute\",\r\n                        inputs: [BucketName, PlanId],\r\n                        requiredInputs: [BucketName, PlanId],\r\n                        outputs: [BucketId]\r\n                    },\r\n                    [GetGroupPlans]: {\r\n                        displayName: \"Get Group Plans\",\r\n                        type: \"list\",\r\n                        inputs: [PlanOwnerGroup],\r\n                        requiredInputs: [PlanOwnerGroup],\r\n                        outputs: [PlanId, PlanTitle]\r\n                    },\r\n                    [GetPlanBuckets]: {\r\n                        displayName: \"Get Plan Buckets\",\r\n                        type: \"list\",\r\n                        inputs: [PlanId],\r\n                        requiredInputs: [PlanId],\r\n                        outputs: [BucketId, BucketName]\r\n                    },\r\n                    [CreateTask]: {\r\n                        displayName: \"Create Task\",\r\n                        type: \"execute\",\r\n                        inputs: [PlanId, TaskTitle, TaskUserId, BucketId, TaskDueDate],\r\n                        requiredInputs: [PlanId, TaskTitle, TaskUserId],\r\n                        outputs: [TaskId]\r\n                    }\r\n                }\r\n            },\r\n            [User]: {\r\n                displayName: \"User\",\r\n                description: \"User\",\r\n                properties: {\r\n                    [UserEmail]: {\r\n                        displayName: \"User Email\",\r\n                        description: \"User Email\",\r\n                        type: \"string\"\r\n                    },\r\n                    [UserId]: {\r\n                        displayName: \"User ID\",\r\n                        description: \"User ID\",\r\n                        type: \"string\"\r\n                    },\r\n                    [UserDisplayName]: {\r\n                        displayName: \"User Display Name\",\r\n                        description: \"User Display Name\",\r\n                        type: \"string\"\r\n                    },\r\n                    [UserGivenName]: {\r\n                        displayName: \"User Given Name\",\r\n                        description: \"User Given Name\",\r\n                        type: \"string\"\r\n                    },\r\n                    [UserLastName]: {\r\n                        displayName: \"User Last Name\",\r\n                        description: \"User Last Name\",\r\n                        type: \"string\"\r\n                    },\r\n                    [UserJobTitle]: {\r\n                        displayName: \"User Job Title\",\r\n                        description: \"User Job Title\",\r\n                        type: \"string\"\r\n                    }\r\n                },\r\n                methods: {\r\n                    [GetUserByEmail]: {\r\n                        displayName: \"Get User by Email\",\r\n                        type: \"read\",\r\n                        inputs: [UserEmail],\r\n                        requiredInputs: [UserEmail],\r\n                        outputs: [UserId, UserDisplayName, UserEmail, UserGivenName, UserLastName, UserJobTitle]\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    });\r\n}\r\n\r\n// OnExecute\r\nonexecute = function ({ objectName, methodName, parameters, properties }) {\r\n    switch (objectName) {\r\n        case Drive:\r\n            onexecuteDrive(methodName, parameters, properties);\r\n            break;\r\n        case Excel:\r\n            onexecuteExcel(methodName, parameters, properties);\r\n            break;\r\n        case Group:\r\n            onexecuteGroup(methodName, parameters, properties);\r\n            break;\r\n        case Planner:\r\n            onexecutePlanner(methodName, parameters, properties);\r\n            break;\r\n        case User:\r\n            onexecuteUser(methodName, parameters, properties);\r\n            break;\r\n        default: throw new Error(\"The object \" + objectName + \" is not supported.\");\r\n    }\r\n}\r\n\r\nfunction onexecuteDrive(methodName: string, parameters: SingleRecord, properties: SingleRecord) {\r\n    switch (methodName) {\r\n        case FileSearch:\r\n            onexecuteSearchFile(parameters, properties);\r\n            break;\r\n        case CreateFolder:\r\n            onexecuteCreateFolder(parameters, properties);\r\n            break;\r\n        default: throw new Error(\"The method \" + methodName + \" is not supported..\");\r\n    }\r\n}\r\n\r\nfunction onexecuteExcel(methodName: string, parameters: SingleRecord, properties: SingleRecord) {\r\n    switch (methodName) {\r\n        case UsedRangeItems:\r\n            onexecuteUsedRange(parameters, properties);\r\n            break;\r\n        default: throw new Error(\"The method \" + methodName + \" is not supported..\");\r\n    }\r\n}\r\n\r\nfunction onexecuteGroup(methodName: string, parameters: SingleRecord, properties: SingleRecord) {\r\n    switch (methodName) {\r\n        case GetGroups:\r\n            onexecuteGetGroups(parameters, properties);\r\n            break;\r\n        case CreateGroup:\r\n            onexecuteCreateGroup(parameters, properties);\r\n            break;\r\n        case AddMemberToGroup:\r\n            onexecuteAddUserToGroup(parameters, properties);\r\n            break;\r\n        default: throw new Error(\"The method \" + methodName + \" is not supported..\");\r\n    }\r\n}\r\n\r\nfunction onexecutePlanner(methodName: string, parameters: SingleRecord, properties: SingleRecord) {\r\n    switch (methodName) {\r\n        case CreatePlan:\r\n            onexecuteCreatePlan(parameters, properties);\r\n            break;\r\n        case CreateBucket:\r\n            onexecuteCreateBucket(parameters, properties);\r\n            break;\r\n        case GetGroupPlans:\r\n            onexecuteGetPlans(parameters, properties);\r\n            break;\r\n        case GetPlanBuckets:\r\n            onexecuteGetBuckets(parameters, properties);\r\n            break;\r\n        case CreateTask:\r\n            onexecuteCreateTask(parameters, properties);\r\n            break;\r\n        default: throw new Error(\"The method \" + methodName + \" is not supported..\");\r\n    }\r\n}\r\n\r\nfunction onexecuteUser(methodName: string, parameters: SingleRecord, properties: SingleRecord) {\r\n    switch (methodName) {\r\n        case GetUserByEmail:\r\n            onexecuteGetUser(parameters, properties);\r\n            break;\r\n        default: throw new Error(\"The method \" + methodName + \" is not supported..\");\r\n    }\r\n}\r\n\r\nfunction ExecuteRequest(url: string, data: string, requestType: string, cb) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange = function () {\r\n        console.log(\"ExecuteRequest XHR status: \" + xhr.status + \",\" + xhr.responseText);\r\n        if (xhr.readyState !== 4)\r\n            return;\r\n        if (xhr.status == 201) {\r\n            //console.log(\"ExecuteRequest XHR status: \" + xhr.status + \",\" + xhr.responseText);\r\n            var obj;\r\n\r\n            try {\r\n                obj = JSON.parse(xhr.responseText);\r\n            }\r\n            catch (e) {\r\n                //do nothing\r\n            }\r\n\r\n            if (typeof cb === 'function')\r\n                cb(obj);\r\n        }\r\n        else if (xhr.status == 204) {\r\n            if (typeof cb === 'function')\r\n                cb(xhr.responseText);\r\n        }\r\n        else if (xhr.status == 200) {\r\n            var obj = JSON.parse(xhr.responseText);\r\n            //console.log(\"ExecuteRequest XHR status: \" + xhr.status + \",\" + xhr.responseText);\r\n            //console.log(\"ExecuteRequest cb type of: \" + (typeof cb).toString());\r\n            if (typeof cb === 'function')\r\n                cb(obj);\r\n        }\r\n        else if (xhr.status == 202) {\r\n            if (typeof cb === 'function')\r\n                cb(null);\r\n        }\r\n        else if (xhr.status == 400) {\r\n            // This is a bad request, return error to UI\r\n            var obj = JSON.parse(xhr.responseText);\r\n            throw new Error(obj.error.code + \": \" + obj.error.message);\r\n        }\r\n        else if (xhr.status == 404) {\r\n            var obj = JSON.parse(xhr.responseText);\r\n            // This is to supress an error that happens with team archive/unarchive\r\n            var errorMessage = obj.error.message;\r\n            if (errorMessage.startswith == \"No Team found with Group id\") {\r\n                // do nothing - supress error\r\n            }\r\n            else {\r\n                throw new Error(obj.error.code + \": \" + obj.error.message);\r\n            }\r\n            //console.log(\"MSTeamsConnector ExecuteRequest: Failed with 404 error.\");\r\n            //throw new Error(obj.error.code + \" error: \" + obj.error.message);\r\n            //console.log(\"Failed with status \" + xhr.status + \" \" + xhr.responseText);\r\n        }\r\n        else {\r\n            postResult({\r\n                //TeamIsSuccessful: false\r\n            });\r\n            var obj = JSON.parse(xhr.responseText);\r\n            throw new Error(obj.error.code + \": \" + obj.error.message);\r\n            //console.log(\"Failed with status \" + xhr.status + \" \" + xhr.responseText);\r\n\r\n        }\r\n    };\r\n    console.log(\"MSTeamsConnector ExecuteRequest: \" + url);\r\n    xhr.open(requestType.toUpperCase(), url);\r\n    // Authentication Header\r\n    xhr.withCredentials = true;\r\n    xhr.setRequestHeader(\"Accept\", \"application/json\");\r\n    if (requestType.toUpperCase() == \"PUT\" || requestType.toUpperCase() == \"POST\" || requestType.toUpperCase() == \"PATCH\") {\r\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n    }\r\n    xhr.send(data);\r\n}\r\n\r\n\r\nfunction onexecuteSearchFile(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetDriveFile(parameters, properties, function (a) {\r\n        var resultObj = {\r\n            [FileId]: \"\",\r\n            [FileWebUrl]: \"\",\r\n            [FileSize]: 0,\r\n            [FileName]: \"\",\r\n            [FileCreated]: null,\r\n            [FileCreatedBy]: \"\",\r\n            [FileCreatedByEmail]: \"\",\r\n            [FileMimeType]: \"\"\r\n        };\r\n\r\n        if (a.value.length > 0) {\r\n            resultObj[FileId] = a.value[0].id;\r\n            resultObj[FileWebUrl] = a.value[0].webUrl;\r\n            resultObj[FileSize] = a.value[0].size;\r\n            resultObj[FileName] = a.value[0].name;\r\n            resultObj[FileCreated] = Date.parse(a.value[0].createdDateTime);\r\n            resultObj[FileCreatedBy] = a.value[0].createdBy.user.displayName;\r\n            resultObj[FileCreatedByEmail] = a.value[0].createdBy.user.email;\r\n            resultObj[FileMimeType] = a.value[0].file.mimeType;\r\n        }\r\n\r\n        postResult(resultObj);\r\n    });\r\n}\r\n\r\nfunction GetDriveFile(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let fileName = properties[FileName];\r\n    let filePath = properties[FilePath];\r\n    if (!(typeof fileName === \"string\")) throw new Error(\"properties[FileName] is not of type string\");\r\n\r\n    var url;\r\n    if ((typeof filePath === \"string\") && (filePath != \"\")) {\r\n        url = baseUriEndpoint + `/me/drive/root:/${filePath}:/search(q='${fileName}')`;\r\n    }\r\n    else {\r\n        url = baseUriEndpoint + `/me/drive/root/search(q='${fileName}')`;\r\n    }\r\n\r\n    ExecuteRequest(url, null, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteCreateFolder(parameters: SingleRecord, properties: SingleRecord) {\r\n    CreateDriveFolder(parameters, properties, function () {\r\n        //postResult({});\r\n    });\r\n}\r\n\r\nfunction CreateDriveFolder(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let folderName = properties[FolderName];\r\n    let folderPath = properties[FolderPath];\r\n\r\n    if (!(typeof folderName === \"string\")) throw new Error(\"properties[FolderName] is not of type string\");\r\n\r\n    var url;\r\n    if ((typeof folderPath === \"string\") && (folderPath != \"\")) {\r\n        url = baseUriEndpoint + `/me/drive/root:/${folderPath}:/children'`;\r\n    }\r\n    else {\r\n        url = baseUriEndpoint + `/me/drive/root/children`;\r\n    }\r\n\r\n    var data = {\r\n        \"name\": folderName,\r\n        \"folder\": {},\r\n        \"@microsoft.graph.conflictBehavior\": \"replace\"\r\n    };\r\n\r\n    ExecuteRequest(url, JSON.stringify(data), \"POST\", function () {\r\n        if (typeof cb === 'function')\r\n            cb();\r\n    });\r\n}\r\n\r\nfunction onexecuteUsedRange(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetRangeItems(parameters, properties, function (a) {\r\n        var obj = a.text.map(x => {\r\n            var obj = {};\r\n\r\n            for (var i = 0; i < x.length; i++) {\r\n                if ((i + 1) < 21) {\r\n                    obj[\"column\" + (i + 1)] = x[i];\r\n                }\r\n            }\r\n            return obj;\r\n        });\r\n\r\n        postResult(obj);\r\n    });\r\n}\r\n\r\nfunction GetRangeItems(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let fileId = properties[FileId];\r\n    let sheetName = properties[ExcelSheetName];\r\n\r\n    if (!(typeof fileId === \"string\")) throw new Error(\"properties[FileId] is not of type string\");\r\n    if (!(typeof sheetName === \"string\")) throw new Error(\"properties[ExcelSheetName] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + `/me/drive/items/${fileId}/workbook/worksheets('${sheetName}')/usedRange`;\r\n\r\n    ExecuteRequest(url, null, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteGetGroups(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetGroupItems(parameters, properties, function (a) {\r\n        postResult(a.value.map(x => {\r\n            return {\r\n                [GroupId]: x.id,\r\n                [GroupName]: x.displayName,\r\n                [GroupDescription]: x.description,\r\n                [GroupMail]: x.mail,\r\n                [GroupVisibility]: x.visibility\r\n            };\r\n        }));\r\n    });\r\n}\r\n\r\nfunction GetGroupItems(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    var url = baseUriEndpoint + '/groups';\r\n\r\n    ExecuteRequest(url, null, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteCreatePlan(parameters: SingleRecord, properties: SingleRecord) {\r\n    CreatePlannerPlan(parameters, properties, function (a) {\r\n        postResult({\r\n            [PlanId]: a.id\r\n        });\r\n    });\r\n}\r\n\r\nfunction CreatePlannerPlan(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let planTitle = properties[PlanTitle];\r\n    let planGroup = properties[PlanOwnerGroup];\r\n\r\n    if (!(typeof planTitle === \"string\")) throw new Error(\"properties[PlanTitle] is not of type string\");\r\n    if (!(typeof planGroup === \"string\")) throw new Error(\"properties[PlanOwnerGroup] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + '/planner/plans';\r\n\r\n    var data = {\r\n        title: planTitle,\r\n        owner: planGroup\r\n    };\r\n\r\n    ExecuteRequest(url, JSON.stringify(data), \"POST\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteCreateBucket(parameters: SingleRecord, properties: SingleRecord) {\r\n    CreatePlannerPlanBucket(parameters, properties, function (a) {\r\n        postResult({\r\n            [BucketId]: a.id\r\n        });\r\n    });\r\n}\r\n\r\nfunction CreatePlannerPlanBucket(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let bucketName = properties[BucketName];\r\n    let planId = properties[PlanId];\r\n\r\n    if (!(typeof bucketName === \"string\")) throw new Error(\"properties[BucketName] is not of type string\");\r\n    if (!(typeof planId === \"string\")) throw new Error(\"properties[PlanId] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + '/planner/buckets';\r\n\r\n    var data = {\r\n        name: bucketName,\r\n        planId: planId\r\n    };\r\n\r\n    ExecuteRequest(url, JSON.stringify(data), \"POST\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteCreateGroup(parameters: SingleRecord, properties: SingleRecord) {\r\n    CreateNewGroup(parameters, properties, function (a) {\r\n        postResult({\r\n            [GroupId]: a.id,\r\n            [GroupName]: a.displayName,\r\n            [GroupDescription]: a.description,\r\n            [GroupMail]: a.mail,\r\n            [GroupVisibility]: a.visibility\r\n        });\r\n    });\r\n}\r\n\r\nfunction CreateNewGroup(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let groupName = properties[GroupName];\r\n    let groupDesc = properties[GroupDescription];\r\n    let groupVisibility = properties[GroupVisibility];\r\n    let groupMailEnabled = properties[GroupMailEnabled];\r\n    let groupMailNic = properties[GroupMailNickname];\r\n    let groupSecurityEnabled = properties[GroupSecurityEnabled];\r\n    let groupOwnerId = properties[GroupOwnerId];\r\n\r\n\r\n    if (!(typeof groupName === \"string\")) throw new Error(\"properties[GroupName] is not of type string\");\r\n    if (!(typeof groupMailNic === \"string\")) throw new Error(\"properties[GroupMailNickname] is not of type string\");\r\n    if (!(typeof groupOwnerId === \"string\")) throw new Error(\"properties[GroupOwnerId] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + '/groups';\r\n\r\n    var data = {\r\n        displayName: groupName,\r\n        mailEnabled: groupMailEnabled,\r\n        mailNickname: groupMailNic,\r\n        securityEnabled: groupSecurityEnabled,\r\n        description: groupDesc,\r\n        visibility: (groupVisibility != null && groupVisibility != \"\") ? groupVisibility : \"Public\",\r\n        groupTypes: [\"Unified\"],\r\n        \"owners@odata.bind\": [\r\n            `https://graph.microsoft.com/v1.0/users/${groupOwnerId}`\r\n        ]\r\n    };\r\n\r\n    ExecuteRequest(url, JSON.stringify(data), \"POST\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteGetUser(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetGroupUserByEmail(parameters, properties, function (a) {\r\n        postResult({\r\n            [UserId]: a.id,\r\n            [UserDisplayName]: a.displayName,\r\n            [UserEmail]: a.mail,\r\n            [UserGivenName]: a.givenName,\r\n            [UserLastName]: a.surname,\r\n            [UserJobTitle]: a.jobTitle\r\n        });\r\n    });\r\n}\r\n\r\nfunction GetGroupUserByEmail(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let userMail = properties[UserEmail];\r\n\r\n    if (!(typeof userMail === \"string\")) throw new Error(\"properties[UserEmail] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + `/users/${userMail}`;\r\n\r\n    ExecuteRequest(url, null, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteAddUserToGroup(parameters: SingleRecord, properties: SingleRecord) {\r\n    AddUser(parameters, properties, function (a) {\r\n        postResult({});\r\n    });\r\n}\r\n\r\nfunction AddUser(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let groupId = properties[GroupId];\r\n    let userId = properties[UserId];\r\n\r\n    if (!(typeof groupId === \"string\")) throw new Error(\"properties[GroupId] is not of type string\");\r\n    if (!(typeof userId === \"string\")) throw new Error(\"properties[UserId] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + `/groups/${groupId}/members/$ref`;\r\n\r\n    var data = {\r\n        \"@odata.id\": `https://graph.microsoft.com/v1.0/directoryObjects/${userId}`\r\n    };\r\n\r\n    ExecuteRequest(url, JSON.stringify(data), \"POST\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteGetPlans(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetPlans(parameters, properties, function (a) {\r\n        postResult(a.value.map(x => {\r\n            return {\r\n                [PlanId]: x.id,\r\n                [PlanTitle]: x.title\r\n            };\r\n        }));\r\n    });\r\n}\r\n\r\nfunction GetPlans(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let groupId = properties[PlanOwnerGroup];\r\n\r\n    if (!(typeof groupId === \"string\")) throw new Error(\"properties[PlanOwnerGroup] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + `/groups/${groupId}/planner/plans`;\r\n\r\n    ExecuteRequest(url, null, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteGetBuckets(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetBuckets(parameters, properties, function (a) {\r\n        postResult(a.value.map(x => {\r\n            return {\r\n                [BucketId]: x.id,\r\n                [BucketName]: x.name\r\n            };\r\n        }));\r\n    });\r\n}\r\n\r\nfunction GetBuckets(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let planId = properties[PlanId];\r\n\r\n    if (!(typeof planId === \"string\")) throw new Error(\"properties[PlanId] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + `/planner/plans/${planId}/buckets`;\r\n\r\n    ExecuteRequest(url, null, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteCreateTask(parameters: SingleRecord, properties: SingleRecord) {\r\n    CreatePlanTask(parameters, properties, function (a) {\r\n        postResult({\r\n            [TaskId]: a.id\r\n        });\r\n    });\r\n}\r\n\r\nfunction CreatePlanTask(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let planId = properties[PlanId];\r\n    let taskUserId = properties[TaskUserId];\r\n    let taskTitle = properties[TaskTitle];\r\n    let taskDueDate = properties[TaskDueDate];\r\n    let bucketId = properties[BucketId];\r\n\r\n    if (!(typeof planId === \"string\")) throw new Error(\"properties[PlanId] is not of type string\");\r\n    if (!(typeof taskUserId === \"string\")) throw new Error(\"properties[TaskUserId] is not of type string\");\r\n    if (!(typeof taskTitle === \"string\")) throw new Error(\"properties[TaskTitle] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + '/planner/tasks';\r\n\r\n    var data = `\"{\\\"planId\\\":\\\"${planId}\\\",\\\"title\\\":\\\"${taskTitle}\\\",\\\"dueDateTime\\\":\\\"${taskDueDate}\\\",\\\"bucketId\\\":\\\"${bucketId}\\\",\\\"assignments\\\":{\\\"${taskUserId}\\\":{\\\"@odata.type\\\":\\\"#microsoft.graph.plannerAssignment\\\",\\\"orderHint\\\":\\\" !\\\"}}}\"`;\r\n\r\n    ExecuteRequest(url, data, \"POST\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}","import '@k2oss/k2-broker-core';\r\nimport './index.ts';\r\n\r\nfunction mock(name: string, value: any) {\r\n    global[name] = value;\r\n}\r\n\r\n// This value is obfuscated on purpose. Replace with a valid OAuth token to run\r\nlet OAuthToken = \"\";\r\n\r\nlet schema = null;\r\nmock('postSchema', function (result: any) {\r\n    schema = result;\r\n    console.log(\"postSchema:\");\r\n    console.log(schema);\r\n});\r\n\r\nlet result: any = null;\r\nfunction pr(r: any) {\r\n    result = r;\r\n   // console.log(\"postResult:\")\r\n   // console.log(JSON.stringify(result));\r\n}\r\n\r\nmock('postResult', pr);\r\nlet xhr: { [key: string]: any } = null;\r\nclass XHR {\r\n    public onreadystatechange: () => void;\r\n    public readyState: number;\r\n    public status: number;\r\n    public responseText: string;\r\n    public withCredentials: boolean\r\n\r\n    private recorder: { [key: string]: any };\r\n\r\n    constructor() {\r\n        xhr = this.recorder = {};\r\n        this.recorder.headers = {};\r\n    }\r\n\r\n    open(method: string, url: string) {\r\n        this.recorder.opened = { method, url };\r\n    }\r\n\r\n    setRequestHeader(key: string, value: string) {\r\n        this.recorder.headers[key] = value;\r\n       // console.log(\"setRequestHeader: \" + key + \"=\" + value);\r\n    }\r\n\r\n    send(payload) {\r\n        const request = require('request')\r\n        if (this.withCredentials) {\r\n            this.setRequestHeader(\"Authorization\", \"Bearer \" + OAuthToken);\r\n        }\r\n\r\n        const options = {\r\n            method: this.recorder.opened.method,\r\n            url: this.recorder.opened.url,\r\n            headers: this.recorder.headers,\r\n            body: payload,\r\n            strictSSL: false\r\n        };\r\n       // console.log(\"URL: \" + options.method + \" \" + options.url);\r\n       // console.log(\"BODY: \" + options.body);\r\n        let promise = new Promise((resolve, reject) => {\r\n            try {\r\n                request(options, (error, res, body) => {\r\n                    if (error) {\r\n                        console.error(\"error inside request:\" + error)\r\n                        return\r\n                    }\r\n                    this.responseText = body;\r\n                    this.readyState = 4;\r\n                    this.status = res.statusCode;\r\n                    this.onreadystatechange();\r\n                    resolve(body);\r\n                    delete this.responseText;\r\n                });\r\n            }\r\n            catch (err) {\r\n                console.log(\"error ouside request \" + err);\r\n                reject()\r\n            }\r\n        }).catch((errr) => {\r\n            console.log(\"Promise error:\" + errr);\r\n        });\r\n    }\r\n}\r\n\r\nmock('XMLHttpRequest', XHR);\r\n\r\nonexecute({\r\n    objectName: 'group',\r\n    methodName: 'getGroups',\r\n    properties: {},\r\n    parameters: {},\r\n    configuration: {},\r\n    schema: {}\r\n});\r\n\r\n"],"names":["metadata","systemName","displayName","description","baseUriEndpoint","PlanId","ExecuteRequest","url","data","requestType","cb","xhr","XMLHttpRequest","onreadystatechange","console","log","status","responseText","readyState","obj","JSON","parse","e","Error","error","code","message","postResult","startswith","open","toUpperCase","withCredentials","setRequestHeader","send","mock","name","value","global","ondescribe","postSchema","objects","properties","type","methods","inputs","requiredInputs","outputs","onexecute","objectName","methodName","parameters","fileName","filePath","GetDriveFile","a","resultObj","length","id","webUrl","size","Date","createdDateTime","createdBy","user","email","file","mimeType","onexecuteSearchFile","folderName","folderPath","stringify","CreateDriveFolder","onexecuteCreateFolder","onexecuteDrive","fileId","sheetName","GetRangeItems","text","map","x","i","onexecuteUsedRange","onexecuteExcel","mail","visibility","groupName","groupDesc","groupVisibility","groupMailEnabled","groupMailNic","groupSecurityEnabled","groupOwnerId","mailEnabled","mailNickname","securityEnabled","groupTypes","CreateNewGroup","onexecuteCreateGroup","groupId","userId","AddUser","onexecuteAddUserToGroup","onexecuteGroup","planTitle","planGroup","title","owner","CreatePlannerPlan","onexecuteCreatePlan","bucketName","planId","CreatePlannerPlanBucket","onexecuteCreateBucket","GetPlans","onexecuteGetPlans","GetBuckets","onexecuteGetBuckets","taskUserId","taskTitle","taskDueDate","bucketId","CreatePlanTask","onexecuteCreateTask","onexecutePlanner","userMail","GetGroupUserByEmail","givenName","surname","jobTitle","onexecuteGetUser","onexecuteUser","schema","result","r","constructor","this","recorder","headers","method","opened","key","payload","request","require","options","body","strictSSL","Promise","resolve","reject","res","statusCode","err","catch","errr","configuration"],"mappings":"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"}