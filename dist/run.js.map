{"version":3,"file":"run.js","sources":["../src/index.ts","../src/run.ts"],"sourcesContent":["import '@k2oss/k2-broker-core';\r\n\r\nmetadata = {\r\n    systemName: \"MSExcelPlannerJSSP\",\r\n    displayName: \"Microsoft Excel and Planner\",\r\n    description: \"A connector for Microsoft Excel and Planner\"\r\n};\r\n\r\n// Constants\r\nconst baseUriEndpoint = \"https://graph.microsoft.com/v1.0\";\r\n\r\n//\r\n// Objects\r\nconst Drive = \"drive\";\r\nconst Excel = \"excel\";\r\nconst Group = \"group\";\r\nconst Planner = \"planner\";\r\n\r\n//\r\n//Drive\r\nconst FileId = \"fileId\";\r\nconst FileWebUrl = \"fileWebUrl\";\r\nconst FileSize = \"fileSize\";\r\nconst FileName = \"fileName\";\r\nconst FileCreated = \"fileCreatedDate\";\r\nconst FileCreatedBy = \"fileCreatedBy\";\r\nconst FileCreatedByEmail = \"fileCreatedByEmail\";\r\nconst FileMimeType = \"fileMimeType\";\r\nconst FilePath = \"filePath\";\r\nconst FolderName = \"folderName\";\r\nconst FolderPath = \"folderPath\";\r\n\r\nconst FileSearch = \"searchFile\";\r\nconst CreateFolder = \"createFolder\";\r\n\r\n//\r\n//Excel\r\nconst ExcelSheetName = \"sheetName\";\r\nconst Column1 = \"column1\";\r\nconst Column2 = \"column2\";\r\nconst Column3 = \"column3\";\r\nconst Column4 = \"column4\";\r\nconst Column5 = \"column5\";\r\nconst Column6 = \"column6\";\r\nconst Column7 = \"column7\";\r\nconst Column8 = \"column8\";\r\nconst Column9 = \"column9\";\r\nconst Column10 = \"column10\";\r\nconst Column11 = \"column11\";\r\nconst Column12 = \"column12\";\r\nconst Column13 = \"column13\";\r\nconst Column14 = \"column14\";\r\nconst Column15 = \"column15\";\r\nconst Column16 = \"column16\";\r\nconst Column17 = \"column17\";\r\nconst Column18 = \"column18\";\r\nconst Column19 = \"column19\";\r\nconst Column20 = \"column20\";\r\n\r\nconst UsedRangeItems = \"getUsedRangeItems\";\r\n\r\n//\r\n//Group\r\nconst GroupId = \"groupId\";\r\nconst GroupName = \"groupName\";\r\nconst GroupDescription = \"groupDescription\";\r\nconst GroupMail = \"groupMail\";\r\nconst GroupVisibility = \"groupVisibility\";\r\nconst GroupMailNickname = \"groupMailNickname\";\r\nconst GroupMailEnabled = \"groupMailEnabled\";\r\nconst GroupSecurityEnabled = \"groupSecurityEnabled\";\r\nconst GroupOwnerId = \"groupOwnerId\";\r\n\r\nconst GetGroups = \"getGroups\";\r\nconst CreateGroup = \"createGroup\";\r\n\r\n//\r\n//Planner\r\nconst PlanTitle = \"planTitle\";\r\nconst PlanOwnerGroup = \"ownerGroup\";\r\nconst PlanId = \"planId\";\r\nconst BucketName = \"bucketName\";\r\nconst BucketId = \"bucketId\";\r\n\r\nconst CreatePlan = \"createPlan\";\r\nconst CreateBucket = \"createBucket\";\r\n\r\n\r\n//OnDescribe\r\nondescribe = function () {\r\n    postSchema({\r\n\r\n        objects: {\r\n            [Drive]: {\r\n                displayName: \"Drive\",\r\n                description: \"Drive\",\r\n                properties: {\r\n                    [FileId]: {\r\n                        displayName: \"File ID\",\r\n                        description: \"File ID\",\r\n                        type: \"string\"\r\n                    },\r\n                    [FileWebUrl]: {\r\n                        displayName: \"File Web URL\",\r\n                        description: \"File Web URL\",\r\n                        type: \"string\"\r\n                    },\r\n                    [FileSize]: {\r\n                        displayName: \"File Size\",\r\n                        description: \"File Size\",\r\n                        type: \"number\"\r\n                    },\r\n                    [FileName]: {\r\n                        displayName: \"File Name\",\r\n                        description: \"File Name\",\r\n                        type: \"string\"\r\n                    },\r\n                    [FileCreated]: {\r\n                        displayName: \"File Created Date\",\r\n                        description: \"File Created Date\",\r\n                        type: \"dateTime\"\r\n                    },\r\n                    [FileCreatedBy]: {\r\n                        displayName: \"File Created By\",\r\n                        description: \"File Created By\",\r\n                        type: \"string\"\r\n                    },\r\n                    [FileCreatedByEmail]: {\r\n                        displayName: \"File Created By Email\",\r\n                        description: \"File Created By Email\",\r\n                        type: \"string\"\r\n                    },\r\n                    [FileMimeType]: {\r\n                        displayName: \"File Mime Type\",\r\n                        description: \"File Mime Type\",\r\n                        type: \"string\"\r\n                    },\r\n                    [FilePath]: {\r\n                        displayName: \"File Path\",\r\n                        description: \"File Path\",\r\n                        type: \"string\"\r\n                    },\r\n                    [FolderName]: {\r\n                        displayName: \"Folder Name\",\r\n                        description: \"Folder Name\",\r\n                        type: \"string\"\r\n                    },\r\n                    [FolderPath]: {\r\n                        displayName: \"Folder Path\",\r\n                        description: \"Folder Path\",\r\n                        type: \"string\"\r\n                    }\r\n                },\r\n                methods: {\r\n                    [FileSearch]: {\r\n                        displayName: \"Search for a file in my OneDrive\",\r\n                        type: \"read\",\r\n                        inputs: [FileName, FilePath],\r\n                        requiredInputs: [FileName],\r\n                        outputs: [FileId, FileWebUrl, FileSize, FileName, FileCreated, FileCreatedBy, FileCreatedByEmail, FileMimeType]\r\n                    },\r\n                    [CreateFolder]: {\r\n                        displayName: \"Create Folder\",\r\n                        type: \"execute\",\r\n                        inputs: [FolderName, FolderPath],\r\n                        requiredInputs: [FolderName],\r\n                        outputs: []\r\n                    }\r\n                }\r\n            },\r\n            [Excel]: {\r\n                displayName: \"Excel\",\r\n                description: \"Excel\",\r\n                properties: {\r\n                    [FileId]: {\r\n                        displayName: \"File ID\",\r\n                        description: \"File ID\",\r\n                        type: \"string\"\r\n                    },\r\n                    [ExcelSheetName]: {\r\n                        displayName: \"Sheet Name\",\r\n                        description: \"Sheet Name\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column1]: {\r\n                        displayName: \"Column 1\",\r\n                        description: \"Column 1\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column2]: {\r\n                        displayName: \"Column 2\",\r\n                        description: \"Column 2\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column3]: {\r\n                        displayName: \"Column 3\",\r\n                        description: \"Column 3\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column4]: {\r\n                        displayName: \"Column 4\",\r\n                        description: \"Column 4\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column5]: {\r\n                        displayName: \"Column 5\",\r\n                        description: \"Column 5\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column6]: {\r\n                        displayName: \"Column 6\",\r\n                        description: \"Column 6\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column7]: {\r\n                        displayName: \"Column 7\",\r\n                        description: \"Column 7\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column8]: {\r\n                        displayName: \"Column 8\",\r\n                        description: \"Column 8\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column9]: {\r\n                        displayName: \"Column 9\",\r\n                        description: \"Column 9\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column10]: {\r\n                        displayName: \"Column 10\",\r\n                        description: \"Column 10\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column11]: {\r\n                        displayName: \"Column 11\",\r\n                        description: \"Column 11\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column12]: {\r\n                        displayName: \"Column 12\",\r\n                        description: \"Column 12\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column13]: {\r\n                        displayName: \"Column 13\",\r\n                        description: \"Column 13\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column14]: {\r\n                        displayName: \"Column 14\",\r\n                        description: \"Column 14\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column15]: {\r\n                        displayName: \"Column 15\",\r\n                        description: \"Column 15\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column16]: {\r\n                        displayName: \"Column 16\",\r\n                        description: \"Column 16\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column17]: {\r\n                        displayName: \"Column 17\",\r\n                        description: \"Column 17\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column18]: {\r\n                        displayName: \"Column 18\",\r\n                        description: \"Column 18\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column19]: {\r\n                        displayName: \"Column 19\",\r\n                        description: \"Column 19\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column20]: {\r\n                        displayName: \"Column 20\",\r\n                        description: \"Column 20\",\r\n                        type: \"string\"\r\n                    }\r\n                },\r\n                methods: {\r\n                    [UsedRangeItems]: {\r\n                        displayName: \"Get Worksheet Rows in Used Range\",\r\n                        type: \"list\",\r\n                        inputs: [FileId, ExcelSheetName],\r\n                        requiredInputs: [FileId, ExcelSheetName],\r\n                        outputs: [Column1, Column2, Column3, Column4, Column5, Column6, Column7, Column8, Column9, Column10, Column11, Column12, Column13, Column14, Column15, Column16, Column17, Column18, Column19, Column20]\r\n                    }\r\n                }\r\n            },\r\n            [Group]: {\r\n                displayName: \"Group\",\r\n                description: \"Group\",\r\n                properties: {\r\n                    [GroupId]: {\r\n                        displayName: \"Group ID\",\r\n                        description: \"Group ID\",\r\n                        type: \"string\"\r\n                    },\r\n                    [GroupName]: {\r\n                        displayName: \"Group Name\",\r\n                        description: \"Group Name\",\r\n                        type: \"string\"\r\n                    },\r\n                    [GroupDescription]: {\r\n                        displayName: \"Group Description\",\r\n                        description: \"Group Description\",\r\n                        type: \"string\"\r\n                    },\r\n                    [GroupMail]: {\r\n                        displayName: \"Group Mail\",\r\n                        description: \"Group Mail\",\r\n                        type: \"string\"\r\n                    },\r\n                    [GroupVisibility]: {\r\n                        displayName: \"Group Visibility\",\r\n                        description: \"Group Visibility\",\r\n                        type: \"string\"\r\n                    },\r\n                    [GroupMailEnabled]: {\r\n                        displayName: \"Mail Enabled\",\r\n                        description: \"Mail Enabled\",\r\n                        type: \"boolean\"\r\n                    },\r\n                    [GroupMailNickname]: {\r\n                        displayName: \"Mail Nickname\",\r\n                        description: \"Mail Nickname\",\r\n                        type: \"string\"\r\n                    },\r\n                    [GroupSecurityEnabled]: {\r\n                        displayName: \"Security Enabled\",\r\n                        description: \"Security Enabled\",\r\n                        type: \"boolean\"\r\n                    },\r\n                    [GroupOwnerId]: {\r\n                        displayName: \"Group Owner Id\",\r\n                        description: \"Group Owner Id\",\r\n                        type: \"string\"\r\n                    }\r\n                },\r\n                methods: {\r\n                    [GetGroups]: {\r\n                        displayName: \"Get all Groups in Organisation\",\r\n                        type: \"list\",\r\n                        inputs: [],\r\n                        requiredInputs: [],\r\n                        outputs: [GroupId, GroupName, GroupDescription, GroupMail, GroupVisibility]\r\n                    },\r\n                    [CreateGroup]: {\r\n                        displayName: \"Create Group\",\r\n                        type: \"execute\",\r\n                        inputs: [GroupName, GroupDescription, GroupVisibility, GroupMailEnabled, GroupMailNickname, GroupSecurityEnabled, GroupOwnerId],\r\n                        requiredInputs: [GroupName, GroupMailEnabled, GroupMailNickname, GroupSecurityEnabled, GroupOwnerId],\r\n                        outputs: [GroupId, GroupName, GroupDescription, GroupMail, GroupVisibility]\r\n                    }\r\n                }\r\n            },\r\n            [Planner]: {\r\n                displayName: \"Planner\",\r\n                description: \"Planner\",\r\n                properties: {\r\n                    [PlanTitle]: {\r\n                        displayName: \"Planner Title\",\r\n                        description: \"Planner Title\",\r\n                        type: \"string\"\r\n                    },\r\n                    [PlanOwnerGroup]: {\r\n                        displayName: \"Owner Group ID\",\r\n                        description: \"Owner Group ID\",\r\n                        type: \"string\"\r\n                    },\r\n                    [PlanId]: {\r\n                        displayName: \"Plan ID\",\r\n                        description: \"Plan ID\",\r\n                        type: \"string\"\r\n                    },\r\n                    [BucketName]: {\r\n                        displayName: \"Bucket Name\",\r\n                        description: \"Bucket Name\",\r\n                        type: \"string\"\r\n                    },\r\n                    [BucketId]: {\r\n                        displayName: \"Bucket ID\",\r\n                        description: \"Bucket ID\",\r\n                        type: \"string\"\r\n                    }\r\n                },\r\n                methods: {\r\n                    [CreatePlan]: {\r\n                        displayName: \"Create Plan\",\r\n                        type: \"execute\",\r\n                        inputs: [PlanTitle, PlanOwnerGroup],\r\n                        requiredInputs: [PlanTitle, PlanOwnerGroup],\r\n                        outputs: [PlanId]\r\n                    },\r\n                    [CreateBucket]: {\r\n                        displayName: \"Create Bucket\",\r\n                        type: \"execute\",\r\n                        inputs: [BucketName, PlanId],\r\n                        requiredInputs: [BucketName, PlanId],\r\n                        outputs: [BucketId]\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    });\r\n}\r\n\r\n// OnExecute\r\nonexecute = function ({ objectName, methodName, parameters, properties }) {\r\n    switch (objectName) {\r\n        case Drive:\r\n            onexecuteDrive(methodName, parameters, properties);\r\n            break;\r\n        case Excel:\r\n            onexecuteExcel(methodName, parameters, properties);\r\n            break;\r\n        case Group:\r\n            onexecuteGroup(methodName, parameters, properties);\r\n            break;\r\n        case Planner:\r\n            onexecutePlanner(methodName, parameters, properties);\r\n            break;\r\n        default: throw new Error(\"The object \" + objectName + \" is not supported.\");\r\n    }\r\n}\r\n\r\nfunction onexecuteDrive(methodName: string, parameters: SingleRecord, properties: SingleRecord) {\r\n    switch (methodName) {\r\n        case FileSearch:\r\n            onexecuteSearchFile(parameters, properties);\r\n            break;\r\n        case CreateFolder:\r\n            onexecuteCreateFolder(parameters, properties);\r\n            break;\r\n        default: throw new Error(\"The method \" + methodName + \" is not supported..\");\r\n    }\r\n}\r\n\r\nfunction onexecuteExcel(methodName: string, parameters: SingleRecord, properties: SingleRecord) {\r\n    switch (methodName) {\r\n        case UsedRangeItems:\r\n            onexecuteUsedRange(parameters, properties);\r\n            break;\r\n        default: throw new Error(\"The method \" + methodName + \" is not supported..\");\r\n    }\r\n}\r\n\r\nfunction onexecuteGroup(methodName: string, parameters: SingleRecord, properties: SingleRecord) {\r\n    switch (methodName) {\r\n        case GetGroups:\r\n            onexecuteGetGroups(parameters, properties);\r\n            break;\r\n        case CreateGroup:\r\n            onexecuteCreateGroup(parameters, properties);\r\n            break;\r\n        default: throw new Error(\"The method \" + methodName + \" is not supported..\");\r\n    }\r\n}\r\n\r\nfunction onexecutePlanner(methodName: string, parameters: SingleRecord, properties: SingleRecord) {\r\n    switch (methodName) {\r\n        case CreatePlan:\r\n            onexecuteCreatePlan(parameters, properties);\r\n            break;\r\n        case CreateBucket:\r\n            onexecuteCreateBucket(parameters, properties);\r\n            break;\r\n        default: throw new Error(\"The method \" + methodName + \" is not supported..\");\r\n    }\r\n}\r\n\r\nfunction ExecuteRequest(url: string, data: string, requestType: string, cb) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange = function () {\r\n        console.log(\"ExecuteRequest XHR status: \" + xhr.status + \",\" + xhr.responseText);\r\n        if (xhr.readyState !== 4)\r\n            return;\r\n        if (xhr.status == 201) {\r\n            //console.log(\"ExecuteRequest XHR status: \" + xhr.status + \",\" + xhr.responseText);\r\n            var obj;\r\n\r\n            try {\r\n                obj = JSON.parse(xhr.responseText);\r\n            }\r\n            catch (e) {\r\n                //do nothing\r\n            }\r\n\r\n            if (typeof cb === 'function')\r\n                cb(obj);\r\n        }\r\n        else if (xhr.status == 204) {\r\n            if (typeof cb === 'function')\r\n                cb(xhr.responseText);\r\n        }\r\n        else if (xhr.status == 200) {\r\n            var obj = JSON.parse(xhr.responseText);\r\n            //console.log(\"ExecuteRequest XHR status: \" + xhr.status + \",\" + xhr.responseText);\r\n            //console.log(\"ExecuteRequest cb type of: \" + (typeof cb).toString());\r\n            if (typeof cb === 'function')\r\n                cb(obj);\r\n        }\r\n        else if (xhr.status == 202) {\r\n            if (typeof cb === 'function')\r\n                cb(null);\r\n        }\r\n        else if (xhr.status == 400) {\r\n            // This is a bad request, return error to UI\r\n            var obj = JSON.parse(xhr.responseText);\r\n            throw new Error(obj.error.code + \": \" + obj.error.message);\r\n        }\r\n        else if (xhr.status == 404) {\r\n            var obj = JSON.parse(xhr.responseText);\r\n            // This is to supress an error that happens with team archive/unarchive\r\n            var errorMessage = obj.error.message;\r\n            if (errorMessage.startswith == \"No Team found with Group id\") {\r\n                // do nothing - supress error\r\n            }\r\n            else {\r\n                throw new Error(obj.error.code + \": \" + obj.error.message);\r\n            }\r\n            //console.log(\"MSTeamsConnector ExecuteRequest: Failed with 404 error.\");\r\n            //throw new Error(obj.error.code + \" error: \" + obj.error.message);\r\n            //console.log(\"Failed with status \" + xhr.status + \" \" + xhr.responseText);\r\n        }\r\n        else {\r\n            postResult({\r\n                //TeamIsSuccessful: false\r\n            });\r\n            var obj = JSON.parse(xhr.responseText);\r\n            throw new Error(obj.error.code + \": \" + obj.error.message);\r\n            //console.log(\"Failed with status \" + xhr.status + \" \" + xhr.responseText);\r\n\r\n        }\r\n    };\r\n    console.log(\"MSTeamsConnector ExecuteRequest: \" + url);\r\n    xhr.open(requestType.toUpperCase(), url);\r\n    // Authentication Header\r\n    xhr.withCredentials = true;\r\n    xhr.setRequestHeader(\"Accept\", \"application/json\");\r\n    if (requestType.toUpperCase() == \"PUT\" || requestType.toUpperCase() == \"POST\" || requestType.toUpperCase() == \"PATCH\") {\r\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n    }\r\n    xhr.send(data);\r\n}\r\n\r\n\r\nfunction onexecuteSearchFile(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetDriveFile(parameters, properties, function (a) {\r\n        var resultObj = {\r\n            [FileId]: \"\",\r\n            [FileWebUrl]: \"\",\r\n            [FileSize]: 0,\r\n            [FileName]: \"\",\r\n            [FileCreated]: null,\r\n            [FileCreatedBy]: \"\",\r\n            [FileCreatedByEmail]: \"\",\r\n            [FileMimeType]: \"\"\r\n        };\r\n\r\n        if (a.value.length > 0) {\r\n            resultObj[FileId] = a.value[0].id;\r\n            resultObj[FileWebUrl] = a.value[0].webUrl;\r\n            resultObj[FileSize] = a.value[0].size;\r\n            resultObj[FileName] = a.value[0].name;\r\n            resultObj[FileCreated] = Date.parse(a.value[0].createdDateTime);\r\n            resultObj[FileCreatedBy] = a.value[0].createdBy.user.displayName;\r\n            resultObj[FileCreatedByEmail] = a.value[0].createdBy.user.email;\r\n            resultObj[FileMimeType] = a.value[0].file.mimeType;\r\n        }\r\n\r\n        postResult(resultObj);\r\n    });\r\n}\r\n\r\nfunction GetDriveFile(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let fileName = properties[FileName];\r\n    let filePath = properties[FilePath];\r\n    if (!(typeof fileName === \"string\")) throw new Error(\"properties[FileName] is not of type string\");\r\n\r\n    var url;\r\n    if ((typeof filePath === \"string\") && (filePath != \"\")) {\r\n        url = baseUriEndpoint + `/me/drive/root:/${filePath}:/search(q='${fileName}')`;\r\n    }\r\n    else {\r\n        url = baseUriEndpoint + `/me/drive/root/search(q='${fileName}')`;\r\n    }\r\n\r\n    ExecuteRequest(url, null, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteCreateFolder(parameters: SingleRecord, properties: SingleRecord) {\r\n    CreateDriveFolder(parameters, properties, function () {\r\n        //postResult({});\r\n    });\r\n}\r\n\r\nfunction CreateDriveFolder(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let folderName = properties[FolderName];\r\n    let folderPath = properties[FolderPath];\r\n\r\n    if (!(typeof folderName === \"string\")) throw new Error(\"properties[FolderName] is not of type string\");\r\n\r\n    var url;\r\n    if ((typeof folderPath === \"string\") && (folderPath != \"\")) {\r\n        url = baseUriEndpoint + `/me/drive/root:/${folderPath}:/children'`;\r\n    }\r\n    else {\r\n        url = baseUriEndpoint + `/me/drive/root/children`;\r\n    }\r\n\r\n    var data = {\r\n        \"name\": folderName,\r\n        \"folder\": {},\r\n        \"@microsoft.graph.conflictBehavior\": \"replace\"\r\n    };\r\n\r\n    ExecuteRequest(url, JSON.stringify(data), \"POST\", function () {\r\n        if (typeof cb === 'function')\r\n            cb();\r\n    });\r\n}\r\n\r\nfunction onexecuteUsedRange(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetRangeItems(parameters, properties, function (a) {\r\n        var obj = a.text.map(x => {\r\n            var obj = {};\r\n\r\n            for (var i = 0; i < x.length; i++) {\r\n                if ((i + 1) < 21) {\r\n                    obj[\"column\" + (i + 1)] = x[i];\r\n                }\r\n            }\r\n            return obj;\r\n        });\r\n\r\n        postResult(obj);\r\n    });\r\n}\r\n\r\nfunction GetRangeItems(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let fileId = properties[FileId];\r\n    let sheetName = properties[ExcelSheetName];\r\n\r\n    if (!(typeof fileId === \"string\")) throw new Error(\"properties[FileId] is not of type string\");\r\n    if (!(typeof sheetName === \"string\")) throw new Error(\"properties[ExcelSheetName] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + `/me/drive/items/${fileId}/workbook/worksheets('${sheetName}')/usedRange`;\r\n\r\n    ExecuteRequest(url, null, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteGetGroups(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetGroupItems(parameters, properties, function (a) {\r\n        postResult(a.value.map(x => {\r\n            return {\r\n                [GroupId]: x.id,\r\n                [GroupName]: x.displayName,\r\n                [GroupDescription]: x.description,\r\n                [GroupMail]: x.mail,\r\n                [GroupVisibility]: x.visibility\r\n            };\r\n        }));\r\n    });\r\n}\r\n\r\nfunction GetGroupItems(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    var url = baseUriEndpoint + '/groups';\r\n\r\n    ExecuteRequest(url, null, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteCreatePlan(parameters: SingleRecord, properties: SingleRecord) {\r\n    CreatePlannerPlan(parameters, properties, function (a) {\r\n        postResult({\r\n            [PlanId]: a.id\r\n        });\r\n    });\r\n}\r\n\r\nfunction CreatePlannerPlan(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let planTitle = properties[PlanTitle];\r\n    let planGroup = properties[PlanOwnerGroup];\r\n\r\n    if (!(typeof planTitle === \"string\")) throw new Error(\"properties[PlanTitle] is not of type string\");\r\n    if (!(typeof planGroup === \"string\")) throw new Error(\"properties[PlanOwnerGroup] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + '/planner/plans';\r\n\r\n    var data = {\r\n        title: planTitle,\r\n        owner: planGroup\r\n    };\r\n\r\n    ExecuteRequest(url, JSON.stringify(data), \"POST\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteCreateBucket(parameters: SingleRecord, properties: SingleRecord) {\r\n    CreatePlannerPlanBucket(parameters, properties, function (a) {\r\n        postResult({\r\n            [BucketId]: a.id\r\n        });\r\n    });\r\n}\r\n\r\nfunction CreatePlannerPlanBucket(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let bucketName = properties[BucketName];\r\n    let planId = properties[PlanId];\r\n\r\n    if (!(typeof bucketName === \"string\")) throw new Error(\"properties[BucketName] is not of type string\");\r\n    if (!(typeof planId === \"string\")) throw new Error(\"properties[PlanId] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + '/planner/buckets';\r\n\r\n    var data = {\r\n        name: bucketName,\r\n        planId: planId\r\n    };\r\n\r\n    ExecuteRequest(url, JSON.stringify(data), \"POST\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteCreateGroup(parameters: SingleRecord, properties: SingleRecord) {\r\n    CreateNewGroup(parameters, properties, function (a) {\r\n        postResult({\r\n            [GroupId]: a.id,\r\n            [GroupName]: a.displayName,\r\n            [GroupDescription]: a.description,\r\n            [GroupMail]: a.mail,\r\n            [GroupVisibility]: a.visibility\r\n        });\r\n    });\r\n}\r\n\r\nfunction CreateNewGroup(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let groupName = properties[GroupName];\r\n    let groupDesc = properties[GroupDescription];\r\n    let groupVisibility = properties[GroupVisibility];\r\n    let groupMailEnabled = properties[GroupMailEnabled];\r\n    let groupMailNic = properties[GroupMailNickname];\r\n    let groupSecurityEnabled = properties[GroupSecurityEnabled];\r\n    let groupOwnerId = properties[GroupOwnerId];\r\n\r\n\r\n    if (!(typeof groupName === \"string\")) throw new Error(\"properties[GroupName] is not of type string\");\r\n    if (!(typeof groupMailNic === \"string\")) throw new Error(\"properties[GroupMailNickname] is not of type string\");\r\n    if (!(typeof groupOwnerId === \"string\")) throw new Error(\"properties[GroupOwnerId] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + '/groups';\r\n\r\n    var data = {\r\n        displayName: groupName,\r\n        mailEnabled: groupMailEnabled,\r\n        mailNickname: groupMailNic,\r\n        securityEnabled: groupSecurityEnabled,\r\n        description: groupDesc,\r\n        visibility: (groupVisibility != null && groupVisibility != \"\") ? groupVisibility : \"Public\",\r\n        groupTypes: [ \"Unified\" ],\r\n        \"owners@odata.bind\": [\r\n            `https://graph.microsoft.com/v1.0/users/${groupOwnerId}`\r\n          ]\r\n    };\r\n\r\n    ExecuteRequest(url, JSON.stringify(data), \"POST\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}","import '@k2oss/k2-broker-core';\r\nimport './index.ts';\r\n\r\nfunction mock(name: string, value: any) {\r\n    global[name] = value;\r\n}\r\n\r\n// This value is obfuscated on purpose. Replace with a valid OAuth token to run\r\nlet OAuthToken = \"\";\r\n\r\nlet schema = null;\r\nmock('postSchema', function (result: any) {\r\n    schema = result;\r\n    console.log(\"postSchema:\");\r\n    console.log(schema);\r\n});\r\n\r\nlet result: any = null;\r\nfunction pr(r: any) {\r\n    result = r;\r\n   // console.log(\"postResult:\")\r\n   // console.log(JSON.stringify(result));\r\n}\r\n\r\nmock('postResult', pr);\r\nlet xhr: { [key: string]: any } = null;\r\nclass XHR {\r\n    public onreadystatechange: () => void;\r\n    public readyState: number;\r\n    public status: number;\r\n    public responseText: string;\r\n    public withCredentials: boolean\r\n\r\n    private recorder: { [key: string]: any };\r\n\r\n    constructor() {\r\n        xhr = this.recorder = {};\r\n        this.recorder.headers = {};\r\n    }\r\n\r\n    open(method: string, url: string) {\r\n        this.recorder.opened = { method, url };\r\n    }\r\n\r\n    setRequestHeader(key: string, value: string) {\r\n        this.recorder.headers[key] = value;\r\n       // console.log(\"setRequestHeader: \" + key + \"=\" + value);\r\n    }\r\n\r\n    send(payload) {\r\n        const request = require('request')\r\n        if (this.withCredentials) {\r\n            this.setRequestHeader(\"Authorization\", \"Bearer \" + OAuthToken);\r\n        }\r\n\r\n        const options = {\r\n            method: this.recorder.opened.method,\r\n            url: this.recorder.opened.url,\r\n            headers: this.recorder.headers,\r\n            body: payload,\r\n            strictSSL: false\r\n        };\r\n       // console.log(\"URL: \" + options.method + \" \" + options.url);\r\n       // console.log(\"BODY: \" + options.body);\r\n        let promise = new Promise((resolve, reject) => {\r\n            try {\r\n                request(options, (error, res, body) => {\r\n                    if (error) {\r\n                        console.error(\"error inside request:\" + error)\r\n                        return\r\n                    }\r\n                    this.responseText = body;\r\n                    this.readyState = 4;\r\n                    this.status = res.statusCode;\r\n                    this.onreadystatechange();\r\n                    resolve(body);\r\n                    delete this.responseText;\r\n                });\r\n            }\r\n            catch (err) {\r\n                console.log(\"error ouside request \" + err);\r\n                reject()\r\n            }\r\n        }).catch((errr) => {\r\n            console.log(\"Promise error:\" + errr);\r\n        });\r\n    }\r\n}\r\n\r\nmock('XMLHttpRequest', XHR);\r\n\r\nonexecute({\r\n    objectName: 'group',\r\n    methodName: 'getGroups',\r\n    properties: {},\r\n    parameters: {},\r\n    configuration: {},\r\n    schema: {}\r\n});\r\n\r\n"],"names":["metadata","systemName","displayName","description","baseUriEndpoint","ExecuteRequest","url","data","requestType","cb","xhr","XMLHttpRequest","onreadystatechange","console","log","status","responseText","readyState","obj","JSON","parse","e","Error","error","code","message","postResult","startswith","open","toUpperCase","withCredentials","setRequestHeader","send","mock","name","value","global","ondescribe","postSchema","objects","properties","type","methods","inputs","requiredInputs","outputs","onexecute","objectName","methodName","parameters","fileName","filePath","GetDriveFile","a","resultObj","length","id","webUrl","size","Date","createdDateTime","createdBy","user","email","file","mimeType","onexecuteSearchFile","folderName","folderPath","stringify","CreateDriveFolder","onexecuteCreateFolder","onexecuteDrive","fileId","sheetName","GetRangeItems","text","map","x","i","onexecuteUsedRange","onexecuteExcel","mail","visibility","groupName","groupDesc","groupVisibility","groupMailEnabled","groupMailNic","groupSecurityEnabled","groupOwnerId","mailEnabled","mailNickname","securityEnabled","groupTypes","CreateNewGroup","onexecuteCreateGroup","onexecuteGroup","planTitle","planGroup","title","owner","CreatePlannerPlan","onexecuteCreatePlan","bucketName","planId","CreatePlannerPlanBucket","onexecuteCreateBucket","onexecutePlanner","schema","result","r","constructor","this","recorder","headers","method","opened","key","payload","request","require","options","body","strictSSL","Promise","resolve","reject","res","statusCode","err","catch","errr","configuration"],"mappings":"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"}