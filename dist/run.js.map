{"version":3,"file":"run.js","sources":["../src/index.ts","../src/run.ts"],"sourcesContent":["import '@k2oss/k2-broker-core';\r\n\r\nmetadata = {\r\n    systemName: \"MSExcelPlannerJSSP\",\r\n    displayName: \"Microsoft Excel and Planner\",\r\n    description: \"A connector for Microsoft Excel and Planner\"\r\n};\r\n\r\n// Constants\r\nconst baseUriEndpoint = \"https://graph.microsoft.com/v1.0\";\r\n\r\n//\r\n// Objects\r\nconst Drive = \"drive\";\r\nconst Excel = \"excel\";\r\nconst Group = \"group\";\r\nconst Planner = \"planner\";\r\nconst User = \"user\";\r\n\r\n//\r\n//Drive\r\nconst FileId = \"fileId\";\r\nconst FileWebUrl = \"fileWebUrl\";\r\nconst FileSize = \"fileSize\";\r\nconst FileName = \"fileName\";\r\nconst FileCreated = \"fileCreatedDate\";\r\nconst FileCreatedBy = \"fileCreatedBy\";\r\nconst FileCreatedByEmail = \"fileCreatedByEmail\";\r\nconst FileMimeType = \"fileMimeType\";\r\nconst FilePath = \"filePath\";\r\nconst FolderName = \"folderName\";\r\nconst FolderPath = \"folderPath\";\r\nconst File = \"file\";\r\n\r\nconst FileSearch = \"searchFile\";\r\nconst CreateFolder = \"createFolder\";\r\n\r\n//\r\n//Excel\r\nconst ExcelSheetName = \"sheetName\";\r\nconst Column1 = \"column1\";\r\nconst Column2 = \"column2\";\r\nconst Column3 = \"column3\";\r\nconst Column4 = \"column4\";\r\nconst Column5 = \"column5\";\r\nconst Column6 = \"column6\";\r\nconst Column7 = \"column7\";\r\nconst Column8 = \"column8\";\r\nconst Column9 = \"column9\";\r\nconst Column10 = \"column10\";\r\nconst Column11 = \"column11\";\r\nconst Column12 = \"column12\";\r\nconst Column13 = \"column13\";\r\nconst Column14 = \"column14\";\r\nconst Column15 = \"column15\";\r\nconst Column16 = \"column16\";\r\nconst Column17 = \"column17\";\r\nconst Column18 = \"column18\";\r\nconst Column19 = \"column19\";\r\nconst Column20 = \"column20\";\r\nconst ColumnName = \"columnName\";\r\nconst WorksheetName = \"worksheetName\";\r\nconst WorksheetId = \"worksheetId\";\r\nconst WorksheetPosition = \"worksheetPosition\";\r\nconst WorksheetVisibility = \"worksheetVisibility\";\r\nconst WorksheetRange = \"worksheetRange\";\r\nconst RowCount = \"rowCount\";\r\nconst ColumnCount = \"columnCount\";\r\nconst CellValue = \"cellValue\";\r\n\r\nconst UsedRangeItems = \"getUsedRangeItems\";\r\nconst GetUsedRangeColumnNames = \"getUsedRangeColumnNames\";\r\nconst GetRangeColumnNames = \"getRangeColumnNames\";\r\nconst GetWorkbookWorksheets = \"getWorkbookWorksheets\";\r\nconst GetRangeItems = \"getRangeItems\";\r\nconst UsedRange = \"getUsedRange\";\r\nconst GetCell = \"getCell\";\r\nconst GetRow = \"getRow\";\r\nconst GetRangeRow = \"getRangeRow\";\r\n\r\n//\r\n//Group\r\nconst GroupId = \"groupId\";\r\nconst GroupName = \"groupName\";\r\nconst GroupDescription = \"groupDescription\";\r\nconst GroupMail = \"groupMail\";\r\nconst GroupVisibility = \"groupVisibility\";\r\nconst GroupMailNickname = \"groupMailNickname\";\r\nconst GroupMailEnabled = \"groupMailEnabled\";\r\nconst GroupSecurityEnabled = \"groupSecurityEnabled\";\r\nconst GroupOwnerId = \"groupOwnerId\";\r\n\r\nconst GetGroups = \"getGroups\";\r\nconst CreateGroup = \"createGroup\";\r\nconst AddMemberToGroup = \"addMemberToGroup\";\r\n\r\n//\r\n//Planner\r\nconst PlanTitle = \"planTitle\";\r\nconst PlanOwnerGroup = \"ownerGroup\";\r\nconst PlanId = \"planId\";\r\nconst BucketName = \"bucketName\";\r\nconst BucketId = \"bucketId\";\r\nconst TaskId = \"taskId\";\r\nconst TaskTitle = \"taskTitle\";\r\nconst TaskUserId = \"taskUserId\";\r\nconst TaskDueDate = \"taskDueDate\";\r\n\r\nconst CreatePlan = \"createPlan\";\r\nconst CreateBucket = \"createBucket\";\r\nconst GetGroupPlans = \"getGroupPlans\";\r\nconst GetPlanBuckets = \"getPlanBuckets\";\r\nconst CreateTask = \"createTask\";\r\n\r\n//\r\n//User\r\nconst UserEmail = \"userEmail\";\r\nconst UserId = \"userId\";\r\nconst UserDisplayName = \"userDisplayName\";\r\nconst UserGivenName = \"userGivenName\";\r\nconst UserLastName = \"userLastName\";\r\nconst UserJobTitle = \"userJobTitle\";\r\n\r\nconst GetUserByEmail = \"getUserByEmail\";\r\n\r\n//OnDescribe\r\nondescribe = function () {\r\n    postSchema({\r\n\r\n        objects: {\r\n            [Drive]: {\r\n                displayName: \"Drive\",\r\n                description: \"Drive\",\r\n                properties: {\r\n                    [FileId]: {\r\n                        displayName: \"File ID\",\r\n                        description: \"File ID\",\r\n                        type: \"string\"\r\n                    },\r\n                    [FileWebUrl]: {\r\n                        displayName: \"File Web URL\",\r\n                        description: \"File Web URL\",\r\n                        type: \"string\"\r\n                    },\r\n                    [FileSize]: {\r\n                        displayName: \"File Size\",\r\n                        description: \"File Size\",\r\n                        type: \"number\"\r\n                    },\r\n                    [FileName]: {\r\n                        displayName: \"File Name\",\r\n                        description: \"File Name\",\r\n                        type: \"string\"\r\n                    },\r\n                    [FileCreated]: {\r\n                        displayName: \"File Created Date\",\r\n                        description: \"File Created Date\",\r\n                        type: \"dateTime\"\r\n                    },\r\n                    [FileCreatedBy]: {\r\n                        displayName: \"File Created By\",\r\n                        description: \"File Created By\",\r\n                        type: \"string\"\r\n                    },\r\n                    [FileCreatedByEmail]: {\r\n                        displayName: \"File Created By Email\",\r\n                        description: \"File Created By Email\",\r\n                        type: \"string\"\r\n                    },\r\n                    [FileMimeType]: {\r\n                        displayName: \"File Mime Type\",\r\n                        description: \"File Mime Type\",\r\n                        type: \"string\"\r\n                    },\r\n                    [FilePath]: {\r\n                        displayName: \"File Path\",\r\n                        description: \"File Path\",\r\n                        type: \"string\"\r\n                    },\r\n                    [FolderName]: {\r\n                        displayName: \"Folder Name\",\r\n                        description: \"Folder Name\",\r\n                        type: \"string\"\r\n                    },\r\n                    [FolderPath]: {\r\n                        displayName: \"Folder Path\",\r\n                        description: \"Folder Path\",\r\n                        type: \"string\"\r\n                    },\r\n                    [File]: {\r\n                        displayName: \"File\",\r\n                        description: \"File\",\r\n                        type: \"attachment\"\r\n                    }\r\n                },\r\n                methods: {\r\n                    [FileSearch]: {\r\n                        displayName: \"Search for a file in my OneDrive\",\r\n                        type: \"list\",\r\n                        inputs: [FileName, FilePath],\r\n                        requiredInputs: [FileName],\r\n                        outputs: [FileId, FileWebUrl, FileSize, FileName, FileCreated, FileCreatedBy, FileCreatedByEmail, FileMimeType]\r\n                    },\r\n                    [CreateFolder]: {\r\n                        displayName: \"Create Folder\",\r\n                        type: \"execute\",\r\n                        inputs: [FolderName, FolderPath],\r\n                        requiredInputs: [FolderName],\r\n                        outputs: []\r\n                    }\r\n                }\r\n            },\r\n            [Excel]: {\r\n                displayName: \"Excel\",\r\n                description: \"Excel\",\r\n                properties: {\r\n                    [FileId]: {\r\n                        displayName: \"File ID\",\r\n                        description: \"File ID\",\r\n                        type: \"string\"\r\n                    },\r\n                    [ExcelSheetName]: {\r\n                        displayName: \"Sheet Name\",\r\n                        description: \"Sheet Name\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column1]: {\r\n                        displayName: \"Column 1\",\r\n                        description: \"Column 1\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column2]: {\r\n                        displayName: \"Column 2\",\r\n                        description: \"Column 2\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column3]: {\r\n                        displayName: \"Column 3\",\r\n                        description: \"Column 3\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column4]: {\r\n                        displayName: \"Column 4\",\r\n                        description: \"Column 4\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column5]: {\r\n                        displayName: \"Column 5\",\r\n                        description: \"Column 5\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column6]: {\r\n                        displayName: \"Column 6\",\r\n                        description: \"Column 6\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column7]: {\r\n                        displayName: \"Column 7\",\r\n                        description: \"Column 7\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column8]: {\r\n                        displayName: \"Column 8\",\r\n                        description: \"Column 8\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column9]: {\r\n                        displayName: \"Column 9\",\r\n                        description: \"Column 9\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column10]: {\r\n                        displayName: \"Column 10\",\r\n                        description: \"Column 10\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column11]: {\r\n                        displayName: \"Column 11\",\r\n                        description: \"Column 11\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column12]: {\r\n                        displayName: \"Column 12\",\r\n                        description: \"Column 12\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column13]: {\r\n                        displayName: \"Column 13\",\r\n                        description: \"Column 13\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column14]: {\r\n                        displayName: \"Column 14\",\r\n                        description: \"Column 14\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column15]: {\r\n                        displayName: \"Column 15\",\r\n                        description: \"Column 15\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column16]: {\r\n                        displayName: \"Column 16\",\r\n                        description: \"Column 16\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column17]: {\r\n                        displayName: \"Column 17\",\r\n                        description: \"Column 17\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column18]: {\r\n                        displayName: \"Column 18\",\r\n                        description: \"Column 18\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column19]: {\r\n                        displayName: \"Column 19\",\r\n                        description: \"Column 19\",\r\n                        type: \"string\"\r\n                    },\r\n                    [Column20]: {\r\n                        displayName: \"Column 20\",\r\n                        description: \"Column 20\",\r\n                        type: \"string\"\r\n                    },\r\n                    [ColumnName]: {\r\n                        displayName: \"Column Index\",\r\n                        description: \"Column Index\",\r\n                        type: \"string\"\r\n                    },\r\n                    [WorksheetId]: {\r\n                        displayName: \"Worksheet ID\",\r\n                        description: \"Worksheet ID\",\r\n                        type: \"string\"\r\n                    },\r\n                    [WorksheetName]: {\r\n                        displayName: \"Worksheet Name\",\r\n                        description: \"Worksheet Name\",\r\n                        type: \"string\"\r\n                    },\r\n                    [WorksheetPosition]: {\r\n                        displayName: \"Worksheet Position\",\r\n                        description: \"Worksheet Position\",\r\n                        type: \"string\"\r\n                    },\r\n                    [WorksheetVisibility]: {\r\n                        displayName: \"Worksheet Visibility\",\r\n                        description: \"Worksheet Visibility\",\r\n                        type: \"string\"\r\n                    },\r\n                    [WorksheetRange]: {\r\n                        displayName: \"Worksheet Range\",\r\n                        description: \"Worksheet Range\",\r\n                        type: \"string\"\r\n                    },\r\n                    [RowCount]: {\r\n                        displayName: \"Row Count\",\r\n                        description: \"Row Count\",\r\n                        type: \"number\"\r\n                    },\r\n                    [ColumnCount]: {\r\n                        displayName: \"Column Count\",\r\n                        description: \"Column Count\",\r\n                        type: \"number\"\r\n                    },\r\n                    [CellValue]: {\r\n                        displayName: \"Cell Value\",\r\n                        description: \"Cell Value\",\r\n                        type: \"string\"\r\n                    }\r\n                },\r\n                methods: {\r\n                    [UsedRange]: {\r\n                        displayName: \"Get Used Range\",\r\n                        type: \"read\",\r\n                        inputs: [FileId, ExcelSheetName],\r\n                        requiredInputs: [FileId, ExcelSheetName],\r\n                        outputs: [WorksheetRange]\r\n                    },\r\n                    [UsedRangeItems]: {\r\n                        displayName: \"Get Worksheet Rows in Used Range\",\r\n                        type: \"list\",\r\n                        inputs: [FileId, ExcelSheetName],\r\n                        requiredInputs: [FileId, ExcelSheetName],\r\n                        outputs: [Column1, Column2, Column3, Column4, Column5, Column6, Column7, Column8, Column9, Column10, Column11, Column12, Column13, Column14, Column15, Column16, Column17, Column18, Column19, Column20]\r\n                    },\r\n                    [GetUsedRangeColumnNames]: {\r\n                        displayName: \"Get Used Range Column Counts\",\r\n                        type: \"list\",\r\n                        inputs: [FileId, ExcelSheetName],\r\n                        requiredInputs: [FileId, ExcelSheetName],\r\n                        outputs: [ColumnName]\r\n                    },\r\n                    [GetRangeColumnNames]: {\r\n                        displayName: \"Get Range Column Counts\",\r\n                        type: \"list\",\r\n                        inputs: [FileId, ExcelSheetName, WorksheetRange],\r\n                        requiredInputs: [FileId, ExcelSheetName, WorksheetRange],\r\n                        outputs: [ColumnName]\r\n                    },\r\n                    [GetWorkbookWorksheets]: {\r\n                        displayName: \"Get Worksheets\",\r\n                        type: \"list\",\r\n                        inputs: [FileId],\r\n                        requiredInputs: [FileId],\r\n                        outputs: [WorksheetId, WorksheetName, WorksheetPosition, WorksheetVisibility]\r\n                    },\r\n                    [GetRangeItems]: {\r\n                        displayName: \"Get Worksheet Rows in a Specified Range\",\r\n                        type: \"list\",\r\n                        inputs: [FileId, ExcelSheetName, WorksheetRange],\r\n                        requiredInputs: [FileId, ExcelSheetName, WorksheetRange],\r\n                        outputs: [Column1, Column2, Column3, Column4, Column5, Column6, Column7, Column8, Column9, Column10, Column11, Column12, Column13, Column14, Column15, Column16, Column17, Column18, Column19, Column20]\r\n                    },\r\n                    [GetCell]: {\r\n                        displayName: \"Get a Cell Value\",\r\n                        type: \"read\",\r\n                        inputs: [FileId, ExcelSheetName, WorksheetRange, RowCount, ColumnCount],\r\n                        requiredInputs: [FileId, ExcelSheetName, WorksheetRange, RowCount, ColumnCount],\r\n                        outputs: [CellValue]\r\n                    },\r\n                    [GetRow]: {\r\n                        displayName: \"Get a Worksheet Row in Used Range\",\r\n                        type: \"read\",\r\n                        inputs: [FileId, ExcelSheetName, RowCount],\r\n                        requiredInputs: [FileId, ExcelSheetName, RowCount],\r\n                        outputs: [Column1, Column2, Column3, Column4, Column5, Column6, Column7, Column8, Column9, Column10, Column11, Column12, Column13, Column14, Column15, Column16, Column17, Column18, Column19, Column20]\r\n                    },\r\n                    [GetRangeRow]: {\r\n                        displayName: \"Get a Worksheet Row in Range\",\r\n                        type: \"read\",\r\n                        inputs: [FileId, ExcelSheetName, WorksheetRange, RowCount],\r\n                        requiredInputs: [FileId, ExcelSheetName, WorksheetRange, RowCount],\r\n                        outputs: [Column1, Column2, Column3, Column4, Column5, Column6, Column7, Column8, Column9, Column10, Column11, Column12, Column13, Column14, Column15, Column16, Column17, Column18, Column19, Column20]\r\n                    }\r\n                }\r\n            },\r\n            [Group]: {\r\n                displayName: \"Group\",\r\n                description: \"Group\",\r\n                properties: {\r\n                    [GroupId]: {\r\n                        displayName: \"Group ID\",\r\n                        description: \"Group ID\",\r\n                        type: \"string\"\r\n                    },\r\n                    [GroupName]: {\r\n                        displayName: \"Group Name\",\r\n                        description: \"Group Name\",\r\n                        type: \"string\"\r\n                    },\r\n                    [GroupDescription]: {\r\n                        displayName: \"Group Description\",\r\n                        description: \"Group Description\",\r\n                        type: \"string\"\r\n                    },\r\n                    [GroupMail]: {\r\n                        displayName: \"Group Mail\",\r\n                        description: \"Group Mail\",\r\n                        type: \"string\"\r\n                    },\r\n                    [GroupVisibility]: {\r\n                        displayName: \"Group Visibility\",\r\n                        description: \"Group Visibility\",\r\n                        type: \"string\"\r\n                    },\r\n                    [GroupMailEnabled]: {\r\n                        displayName: \"Mail Enabled\",\r\n                        description: \"Mail Enabled\",\r\n                        type: \"boolean\"\r\n                    },\r\n                    [GroupMailNickname]: {\r\n                        displayName: \"Mail Nickname\",\r\n                        description: \"Mail Nickname\",\r\n                        type: \"string\"\r\n                    },\r\n                    [GroupSecurityEnabled]: {\r\n                        displayName: \"Security Enabled\",\r\n                        description: \"Security Enabled\",\r\n                        type: \"boolean\"\r\n                    },\r\n                    [GroupOwnerId]: {\r\n                        displayName: \"Group Owner ID\",\r\n                        description: \"Group Owner ID\",\r\n                        type: \"string\"\r\n                    },\r\n                    [UserId]: {\r\n                        displayName: \"User ID\",\r\n                        description: \"User ID\",\r\n                        type: \"string\"\r\n                    }\r\n                },\r\n                methods: {\r\n                    [GetGroups]: {\r\n                        displayName: \"Get all Groups in Organisation\",\r\n                        type: \"list\",\r\n                        inputs: [],\r\n                        requiredInputs: [],\r\n                        outputs: [GroupId, GroupName, GroupDescription, GroupMail, GroupVisibility]\r\n                    },\r\n                    [CreateGroup]: {\r\n                        displayName: \"Create Group\",\r\n                        type: \"execute\",\r\n                        inputs: [GroupName, GroupDescription, GroupVisibility, GroupMailEnabled, GroupMailNickname, GroupSecurityEnabled, GroupOwnerId],\r\n                        requiredInputs: [GroupName, GroupMailEnabled, GroupMailNickname, GroupSecurityEnabled, GroupOwnerId],\r\n                        outputs: [GroupId, GroupName, GroupDescription, GroupMail, GroupVisibility]\r\n                    },\r\n                    [AddMemberToGroup]: {\r\n                        displayName: \"Add Member to Group\",\r\n                        type: \"execute\",\r\n                        inputs: [GroupId, UserId],\r\n                        requiredInputs: [GroupId, UserId],\r\n                        outputs: []\r\n                    }\r\n                }\r\n            },\r\n            [Planner]: {\r\n                displayName: \"Planner\",\r\n                description: \"Planner\",\r\n                properties: {\r\n                    [PlanTitle]: {\r\n                        displayName: \"Planner Title\",\r\n                        description: \"Planner Title\",\r\n                        type: \"string\"\r\n                    },\r\n                    [PlanOwnerGroup]: {\r\n                        displayName: \"Owner Group ID\",\r\n                        description: \"Owner Group ID\",\r\n                        type: \"string\"\r\n                    },\r\n                    [PlanId]: {\r\n                        displayName: \"Plan ID\",\r\n                        description: \"Plan ID\",\r\n                        type: \"string\"\r\n                    },\r\n                    [BucketName]: {\r\n                        displayName: \"Bucket Name\",\r\n                        description: \"Bucket Name\",\r\n                        type: \"string\"\r\n                    },\r\n                    [BucketId]: {\r\n                        displayName: \"Bucket ID\",\r\n                        description: \"Bucket ID\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TaskTitle]: {\r\n                        displayName: \"Task Title\",\r\n                        description: \"Task Title\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TaskUserId]: {\r\n                        displayName: \"Task Assigned To User ID\",\r\n                        description: \"Task Assigned To User ID\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TaskDueDate]: {\r\n                        displayName: \"Task Due Date\",\r\n                        description: \"Task Due Date\",\r\n                        type: \"dateTime\"\r\n                    },\r\n                    [TaskId]: {\r\n                        displayName: \"Task ID\",\r\n                        description: \"Task ID\",\r\n                        type: \"string\"\r\n                    }\r\n                },\r\n                methods: {\r\n                    [CreatePlan]: {\r\n                        displayName: \"Create Plan\",\r\n                        type: \"execute\",\r\n                        inputs: [PlanTitle, PlanOwnerGroup],\r\n                        requiredInputs: [PlanTitle, PlanOwnerGroup],\r\n                        outputs: [PlanId]\r\n                    },\r\n                    [CreateBucket]: {\r\n                        displayName: \"Create Bucket\",\r\n                        type: \"execute\",\r\n                        inputs: [BucketName, PlanId],\r\n                        requiredInputs: [BucketName, PlanId],\r\n                        outputs: [BucketId]\r\n                    },\r\n                    [GetGroupPlans]: {\r\n                        displayName: \"Get Group Plans\",\r\n                        type: \"list\",\r\n                        inputs: [PlanOwnerGroup],\r\n                        requiredInputs: [PlanOwnerGroup],\r\n                        outputs: [PlanId, PlanTitle]\r\n                    },\r\n                    [GetPlanBuckets]: {\r\n                        displayName: \"Get Plan Buckets\",\r\n                        type: \"list\",\r\n                        inputs: [PlanId],\r\n                        requiredInputs: [PlanId],\r\n                        outputs: [BucketId, BucketName]\r\n                    },\r\n                    [CreateTask]: {\r\n                        displayName: \"Create Task\",\r\n                        type: \"execute\",\r\n                        inputs: [PlanId, TaskTitle, TaskUserId, BucketId, TaskDueDate],\r\n                        requiredInputs: [PlanId, TaskTitle, TaskUserId],\r\n                        outputs: [TaskId]\r\n                    }\r\n                }\r\n            },\r\n            [User]: {\r\n                displayName: \"User\",\r\n                description: \"User\",\r\n                properties: {\r\n                    [UserEmail]: {\r\n                        displayName: \"User Email\",\r\n                        description: \"User Email\",\r\n                        type: \"string\"\r\n                    },\r\n                    [UserId]: {\r\n                        displayName: \"User ID\",\r\n                        description: \"User ID\",\r\n                        type: \"string\"\r\n                    },\r\n                    [UserDisplayName]: {\r\n                        displayName: \"User Display Name\",\r\n                        description: \"User Display Name\",\r\n                        type: \"string\"\r\n                    },\r\n                    [UserGivenName]: {\r\n                        displayName: \"User Given Name\",\r\n                        description: \"User Given Name\",\r\n                        type: \"string\"\r\n                    },\r\n                    [UserLastName]: {\r\n                        displayName: \"User Last Name\",\r\n                        description: \"User Last Name\",\r\n                        type: \"string\"\r\n                    },\r\n                    [UserJobTitle]: {\r\n                        displayName: \"User Job Title\",\r\n                        description: \"User Job Title\",\r\n                        type: \"string\"\r\n                    }\r\n                },\r\n                methods: {\r\n                    [GetUserByEmail]: {\r\n                        displayName: \"Get User by Email\",\r\n                        type: \"read\",\r\n                        inputs: [UserEmail],\r\n                        requiredInputs: [UserEmail],\r\n                        outputs: [UserId, UserDisplayName, UserEmail, UserGivenName, UserLastName, UserJobTitle]\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    });\r\n}\r\n\r\n// OnExecute\r\nonexecute = function ({ objectName, methodName, parameters, properties }) {\r\n    switch (objectName) {\r\n        case Drive:\r\n            onexecuteDrive(methodName, parameters, properties);\r\n            break;\r\n        case Excel:\r\n            onexecuteExcel(methodName, parameters, properties);\r\n            break;\r\n        case Group:\r\n            onexecuteGroup(methodName, parameters, properties);\r\n            break;\r\n        case Planner:\r\n            onexecutePlanner(methodName, parameters, properties);\r\n            break;\r\n        case User:\r\n            onexecuteUser(methodName, parameters, properties);\r\n            break;\r\n        default: throw new Error(\"The object \" + objectName + \" is not supported.\");\r\n    }\r\n}\r\n\r\nfunction onexecuteDrive(methodName: string, parameters: SingleRecord, properties: SingleRecord) {\r\n    switch (methodName) {\r\n        case FileSearch:\r\n            onexecuteSearchFile(parameters, properties);\r\n            break;\r\n        case CreateFolder:\r\n            onexecuteCreateFolder(parameters, properties);\r\n            break;\r\n        default: throw new Error(\"The method \" + methodName + \" is not supported..\");\r\n    }\r\n}\r\n\r\nfunction onexecuteExcel(methodName: string, parameters: SingleRecord, properties: SingleRecord) {\r\n    switch (methodName) {\r\n        case UsedRange:\r\n            onexecuteGetUsedRange(parameters, properties);\r\n            break;\r\n        case UsedRangeItems:\r\n            onexecuteUsedRange(parameters, properties);\r\n            break;\r\n        case GetUsedRangeColumnNames:\r\n            onexecuteGetUsedRangeColumnNames(parameters, properties);\r\n            break;\r\n        case GetRangeColumnNames:\r\n            onexecuteGetRangeColumnNames(parameters, properties);\r\n            break;\r\n        case GetWorkbookWorksheets:\r\n            onexecuteGetWorksheets(parameters, properties);\r\n            break;\r\n        case GetRangeItems:\r\n            onexecuteGetRangeItems(parameters, properties);\r\n            break;\r\n        case GetCell:\r\n            onexecuteGetCell(parameters, properties);\r\n            break;\r\n        case GetRow:\r\n            onexecuteGetUsedRangeRow(parameters, properties);\r\n            break;\r\n        case GetRangeRow:\r\n            onexecuteGetRangeRow(parameters, properties);\r\n            break;\r\n        default: throw new Error(\"The method \" + methodName + \" is not supported..\");\r\n    }\r\n}\r\n\r\nfunction onexecuteGroup(methodName: string, parameters: SingleRecord, properties: SingleRecord) {\r\n    switch (methodName) {\r\n        case GetGroups:\r\n            onexecuteGetGroups(parameters, properties);\r\n            break;\r\n        case CreateGroup:\r\n            onexecuteCreateGroup(parameters, properties);\r\n            break;\r\n        case AddMemberToGroup:\r\n            onexecuteAddUserToGroup(parameters, properties);\r\n            break;\r\n        default: throw new Error(\"The method \" + methodName + \" is not supported..\");\r\n    }\r\n}\r\n\r\nfunction onexecutePlanner(methodName: string, parameters: SingleRecord, properties: SingleRecord) {\r\n    switch (methodName) {\r\n        case CreatePlan:\r\n            onexecuteCreatePlan(parameters, properties);\r\n            break;\r\n        case CreateBucket:\r\n            onexecuteCreateBucket(parameters, properties);\r\n            break;\r\n        case GetGroupPlans:\r\n            onexecuteGetPlans(parameters, properties);\r\n            break;\r\n        case GetPlanBuckets:\r\n            onexecuteGetBuckets(parameters, properties);\r\n            break;\r\n        case CreateTask:\r\n            onexecuteCreateTask(parameters, properties);\r\n            break;\r\n        default: throw new Error(\"The method \" + methodName + \" is not supported..\");\r\n    }\r\n}\r\n\r\nfunction onexecuteUser(methodName: string, parameters: SingleRecord, properties: SingleRecord) {\r\n    switch (methodName) {\r\n        case GetUserByEmail:\r\n            onexecuteGetUser(parameters, properties);\r\n            break;\r\n        default: throw new Error(\"The method \" + methodName + \" is not supported..\");\r\n    }\r\n}\r\n\r\nfunction ExecuteRequest(url: string, data: string, requestType: string, cb) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange = function () {\r\n        console.log(\"ExecuteRequest XHR status: \" + xhr.status + \",\" + xhr.responseText);\r\n        if (xhr.readyState !== 4)\r\n            return;\r\n        if (xhr.status == 201) {\r\n            //console.log(\"ExecuteRequest XHR status: \" + xhr.status + \",\" + xhr.responseText);\r\n            var obj;\r\n\r\n            try {\r\n                obj = JSON.parse(xhr.responseText);\r\n            }\r\n            catch (e) {\r\n                //do nothing\r\n            }\r\n\r\n            if (typeof cb === 'function')\r\n                cb(obj);\r\n        }\r\n        else if (xhr.status == 204) {\r\n            if (typeof cb === 'function')\r\n                cb(xhr.responseText);\r\n        }\r\n        else if (xhr.status == 200) {\r\n            var obj = JSON.parse(xhr.responseText);\r\n            //console.log(\"ExecuteRequest XHR status: \" + xhr.status + \",\" + xhr.responseText);\r\n            //console.log(\"ExecuteRequest cb type of: \" + (typeof cb).toString());\r\n            if (typeof cb === 'function')\r\n                cb(obj);\r\n        }\r\n        else if (xhr.status == 202) {\r\n            if (typeof cb === 'function')\r\n                cb(null);\r\n        }\r\n        else if (xhr.status == 400) {\r\n            // This is a bad request, return error to UI\r\n            var obj = JSON.parse(xhr.responseText);\r\n            throw new Error(obj.error.code + \": \" + obj.error.message);\r\n        }\r\n        else if (xhr.status == 404) {\r\n            var obj = JSON.parse(xhr.responseText);\r\n            // This is to supress an error that happens with team archive/unarchive\r\n            var errorMessage = obj.error.message;\r\n            if (errorMessage.startswith == \"No Team found with Group id\") {\r\n                // do nothing - supress error\r\n            }\r\n            else {\r\n                throw new Error(obj.error.code + \": \" + obj.error.message);\r\n            }\r\n            //console.log(\"MSTeamsConnector ExecuteRequest: Failed with 404 error.\");\r\n            //throw new Error(obj.error.code + \" error: \" + obj.error.message);\r\n            //console.log(\"Failed with status \" + xhr.status + \" \" + xhr.responseText);\r\n        }\r\n        else {\r\n            postResult({\r\n                //TeamIsSuccessful: false\r\n            });\r\n            var obj = JSON.parse(xhr.responseText);\r\n            throw new Error(obj.error.code + \": \" + obj.error.message);\r\n            //console.log(\"Failed with status \" + xhr.status + \" \" + xhr.responseText);\r\n\r\n        }\r\n    };\r\n    console.log(\"MSTeamsConnector ExecuteRequest: \" + url);\r\n    xhr.open(requestType.toUpperCase(), url);\r\n    // Authentication Header\r\n    xhr.withCredentials = true;\r\n    xhr.setRequestHeader(\"Accept\", \"application/json\");\r\n    if (requestType.toUpperCase() == \"PUT\" || requestType.toUpperCase() == \"POST\" || requestType.toUpperCase() == \"PATCH\") {\r\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n    }\r\n    xhr.send(data);\r\n}\r\n\r\n\r\nfunction onexecuteSearchFile(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetDriveFile(parameters, properties, function (a) {\r\n        var resultObj = {\r\n            [FileId]: \"\",\r\n            [FileWebUrl]: \"\",\r\n            [FileSize]: 0,\r\n            [FileName]: \"\",\r\n            [FileCreated]: null,\r\n            [FileCreatedBy]: \"\",\r\n            [FileCreatedByEmail]: \"\",\r\n            [FileMimeType]: \"\"\r\n        };\r\n\r\n        if (a.value.length > 0) {\r\n            resultObj[FileId] = a.value[0].id;\r\n            resultObj[FileWebUrl] = a.value[0].webUrl;\r\n            resultObj[FileSize] = a.value[0].size;\r\n            resultObj[FileName] = a.value[0].name;\r\n            resultObj[FileCreated] = Date.parse(a.value[0].createdDateTime);\r\n            resultObj[FileCreatedBy] = a.value[0].createdBy.user.displayName;\r\n            resultObj[FileCreatedByEmail] = a.value[0].createdBy.user.email;\r\n            resultObj[FileMimeType] = a.value[0].file.mimeType;\r\n        }\r\n\r\n        postResult(resultObj);\r\n    });\r\n}\r\n\r\nfunction GetDriveFile(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let fileName = properties[FileName];\r\n    let filePath = properties[FilePath];\r\n    if (!(typeof fileName === \"string\")) throw new Error(\"properties[FileName] is not of type string\");\r\n\r\n    var url;\r\n    if ((typeof filePath === \"string\") && (filePath != \"\")) {\r\n        url = baseUriEndpoint + `/me/drive/root:/${filePath}:/search(q='${fileName}')`;\r\n    }\r\n    else {\r\n        url = baseUriEndpoint + `/me/drive/root/search(q='${fileName}')`;\r\n    }\r\n\r\n    ExecuteRequest(url, null, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteCreateFolder(parameters: SingleRecord, properties: SingleRecord) {\r\n    CreateDriveFolder(parameters, properties, function () {\r\n        //postResult({});\r\n    });\r\n}\r\n\r\nfunction CreateDriveFolder(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let folderName = properties[FolderName];\r\n    let folderPath = properties[FolderPath];\r\n\r\n    if (!(typeof folderName === \"string\")) throw new Error(\"properties[FolderName] is not of type string\");\r\n\r\n    var url;\r\n    if ((typeof folderPath === \"string\") && (folderPath != \"\")) {\r\n        url = baseUriEndpoint + `/me/drive/root:/${folderPath}:/children'`;\r\n    }\r\n    else {\r\n        url = baseUriEndpoint + `/me/drive/root/children`;\r\n    }\r\n\r\n    var data = {\r\n        \"name\": folderName,\r\n        \"folder\": {},\r\n        \"@microsoft.graph.conflictBehavior\": \"replace\"\r\n    };\r\n\r\n    ExecuteRequest(url, JSON.stringify(data), \"POST\", function () {\r\n        if (typeof cb === 'function')\r\n            cb();\r\n    });\r\n}\r\n\r\nfunction onexecuteGetRangeItems(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetItemsByRange(parameters, properties, function (a) {\r\n        var obj = a.values.map(x => {\r\n            var obj = {};\r\n\r\n            for (var i = 0; i < x.length; i++) {\r\n                if ((i + 1) < 21) {\r\n                    obj[\"column\" + (i + 1)] = x[i];\r\n                }\r\n            }\r\n            return obj;\r\n        });\r\n\r\n        postResult(obj);\r\n    });\r\n}\r\n\r\nfunction GetItemsByRange(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let fileId = properties[FileId];\r\n    let sheetName = properties[ExcelSheetName];\r\n    let range = properties[WorksheetRange];\r\n\r\n    if (!(typeof fileId === \"string\")) throw new Error(\"properties[FileId] is not of type string\");\r\n    if (!(typeof sheetName === \"string\")) throw new Error(\"properties[ExcelSheetName] is not of type string\");\r\n    if (!(typeof range === \"string\")) throw new Error(\"properties[WorksheetRange] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + `/me/drive/items/${fileId}/workbook/worksheets/${sheetName}/range(address='${range}')`;\r\n\r\n    ExecuteRequest(url, null, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction GetItemsByRangeRow(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let fileId = properties[FileId];\r\n    let sheetName = properties[ExcelSheetName];\r\n    let range = properties[WorksheetRange];\r\n    let index = properties[ColumnCount];\r\n\r\n    if (!(typeof fileId === \"string\")) throw new Error(\"properties[FileId] is not of type string\");\r\n    if (!(typeof sheetName === \"string\")) throw new Error(\"properties[ExcelSheetName] is not of type string\");\r\n    if (!(typeof range === \"string\")) throw new Error(\"properties[WorksheetRange] is not of type string\");\r\n    if ((typeof index === \"string\") || index < 0) throw new Error(\"properties[ColumnCount] is not correct\");\r\n\r\n    var url = baseUriEndpoint + `/me/drive/items/${fileId}/workbook/worksheets/${sheetName}/range(address='${range}')/visibleView/rows/itemAt(index=${index})`;\r\n\r\n    ExecuteRequest(url, null, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteGetRangeRow(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetItemsByRangeRow(parameters, properties, function (a) {\r\n        var obj = {};\r\n\r\n        if (a.values.length > 0) {\r\n            for (var i = 0; i < a.values[0].length; i++) {\r\n                if ((i + 1) < 21) {\r\n                    obj[\"column\" + (i + 1)] = a.values[0][i];\r\n                }\r\n            }\r\n        }\r\n\r\n        postResult(obj);\r\n    });\r\n}\r\n\r\nfunction GetItemsByUsedRangeRow(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let fileId = properties[FileId];\r\n    let sheetName = properties[ExcelSheetName];\r\n    let index = properties[ColumnCount];\r\n\r\n    if (!(typeof fileId === \"string\")) throw new Error(\"properties[FileId] is not of type string\");\r\n    if (!(typeof sheetName === \"string\")) throw new Error(\"properties[ExcelSheetName] is not of type string\");\r\n    if ((typeof index === \"string\") || index < 0) throw new Error(\"properties[ColumnCount] is not correct\");\r\n\r\n    var url = baseUriEndpoint + `/me/drive/items/${fileId}/workbook/worksheets/${sheetName}/usedRange/visibleView/rows/itemAt(index=${index})`;\r\n\r\n    ExecuteRequest(url, null, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteGetUsedRangeRow(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetItemsByUsedRangeRow(parameters, properties, function (a) {\r\n        var obj = {};\r\n\r\n        if (a.values.length > 0) {\r\n            for (var i = 0; i < a.values[0].length; i++) {\r\n                if ((i + 1) < 21) {\r\n                    obj[\"column\" + (i + 1)] = a.values[0][i];\r\n                }\r\n            }\r\n        }\r\n\r\n        postResult(obj);\r\n    });\r\n}\r\n\r\nfunction onexecuteGetCell(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetCellValue(parameters, properties, function (a) {\r\n        postResult({\r\n            [CellValue]: a.values[0][0]\r\n        });\r\n    });\r\n}\r\n\r\nfunction GetCellValue(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let fileId = properties[FileId];\r\n    let sheetName = properties[ExcelSheetName];\r\n    let range = properties[WorksheetRange];\r\n    let rowCount = properties[RowCount];\r\n    let columnCount = properties[ColumnCount];\r\n\r\n    if (!(typeof fileId === \"string\")) throw new Error(\"properties[FileId] is not of type string\");\r\n    if (!(typeof sheetName === \"string\")) throw new Error(\"properties[ExcelSheetName] is not of type string\");\r\n    if (!(typeof range === \"string\")) throw new Error(\"properties[WorksheetRange] is not of type string\");\r\n    if (!(typeof rowCount === \"number\")) throw new Error(\"properties[RowCount] is not of type integer\");\r\n    if (!(typeof columnCount === \"number\")) throw new Error(\"properties[ColumnCount] is not of type integer\");\r\n\r\n    var url = baseUriEndpoint + `/me/drive/items/${fileId}/workbook/worksheets/${sheetName}/range(address='${range}')/cell(row=${rowCount},column=${columnCount})`;\r\n\r\n    ExecuteRequest(url, null, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteGetUsedRange(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetUsedRangeItems(parameters, properties, function (a) {\r\n        postResult({\r\n            [WorksheetRange]: a.address.split(\"!\")[1]\r\n        });\r\n    });\r\n}\r\n\r\nfunction onexecuteUsedRange(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetUsedRangeItems(parameters, properties, function (a) {\r\n        var obj = a.values.map(x => {\r\n            var obj = {};\r\n\r\n            for (var i = 0; i < x.length; i++) {\r\n                if ((i + 1) < 21) {\r\n                    obj[\"column\" + (i + 1)] = x[i];\r\n                }\r\n            }\r\n            return obj;\r\n        });\r\n\r\n        postResult(obj);\r\n    });\r\n}\r\n\r\nfunction GetUsedRangeItems(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let fileId = properties[FileId];\r\n    let sheetName = properties[ExcelSheetName];\r\n\r\n    if (!(typeof fileId === \"string\")) throw new Error(\"properties[FileId] is not of type string\");\r\n    if (!(typeof sheetName === \"string\")) throw new Error(\"properties[ExcelSheetName] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + `/me/drive/items/${fileId}/workbook/worksheets('${sheetName}')/usedRange`;\r\n\r\n    ExecuteRequest(url, null, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteGetUsedRangeColumnNames(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetUsedRangeItems(parameters, properties, function (a) {\r\n\r\n        var count = 0;\r\n        var objArr = [];\r\n\r\n        if (a.text.length > 0) {\r\n            count = a.text[0].length;\r\n\r\n            for (var i = 1; i < count + 1; i++) {\r\n                objArr.push({\r\n                    [ColumnName]: i\r\n                });\r\n            }\r\n        }\r\n\r\n        postResult(objArr);\r\n    });\r\n}\r\n\r\nfunction onexecuteGetRangeColumnNames(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetItemsByRange(parameters, properties, function (a) {\r\n\r\n        var count = 0;\r\n        var objArr = [];\r\n\r\n        if (a.text.length > 0) {\r\n            count = a.text[0].length;\r\n\r\n            for (var i = 1; i < count + 1; i++) {\r\n                objArr.push({\r\n                    [ColumnName]: i\r\n                });\r\n            }\r\n        }\r\n\r\n        postResult(objArr);\r\n    });\r\n}\r\n\r\nfunction onexecuteGetWorksheets(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetWorksheets(parameters, properties, function (a) {\r\n        var obj = a.value.map(x => {\r\n            return {\r\n                [WorksheetId]: x.id,\r\n                [WorksheetName]: x.name,\r\n                [WorksheetPosition]: x.position,\r\n                [WorksheetVisibility]: x.visibility\r\n            };\r\n        });\r\n\r\n        postResult(obj);\r\n    });\r\n}\r\n\r\nfunction GetWorksheets(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let fileId = properties[FileId];\r\n\r\n    if (!(typeof fileId === \"string\")) throw new Error(\"properties[FileId] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + `/me/drive/items/${fileId}/workbook/worksheets`;\r\n\r\n    ExecuteRequest(url, null, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteGetGroups(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetGroupItems(parameters, properties, function (a) {\r\n        postResult(a.value.map(x => {\r\n            return {\r\n                [GroupId]: x.id,\r\n                [GroupName]: x.displayName,\r\n                [GroupDescription]: x.description,\r\n                [GroupMail]: x.mail,\r\n                [GroupVisibility]: x.visibility\r\n            };\r\n        }));\r\n    });\r\n}\r\n\r\nfunction GetGroupItems(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    var url = baseUriEndpoint + '/groups';\r\n\r\n    ExecuteRequest(url, null, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteCreatePlan(parameters: SingleRecord, properties: SingleRecord) {\r\n    CreatePlannerPlan(parameters, properties, function (a) {\r\n        postResult({\r\n            [PlanId]: a.id\r\n        });\r\n    });\r\n}\r\n\r\nfunction CreatePlannerPlan(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let planTitle = properties[PlanTitle];\r\n    let planGroup = properties[PlanOwnerGroup];\r\n\r\n    if (!(typeof planTitle === \"string\")) throw new Error(\"properties[PlanTitle] is not of type string\");\r\n    if (!(typeof planGroup === \"string\")) throw new Error(\"properties[PlanOwnerGroup] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + '/planner/plans';\r\n\r\n    var data = {\r\n        title: planTitle,\r\n        owner: planGroup\r\n    };\r\n\r\n    ExecuteRequest(url, JSON.stringify(data), \"POST\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteCreateBucket(parameters: SingleRecord, properties: SingleRecord) {\r\n    CreatePlannerPlanBucket(parameters, properties, function (a) {\r\n        postResult({\r\n            [BucketId]: a.id\r\n        });\r\n    });\r\n}\r\n\r\nfunction CreatePlannerPlanBucket(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let bucketName = properties[BucketName];\r\n    let planId = properties[PlanId];\r\n\r\n    if (!(typeof bucketName === \"string\")) throw new Error(\"properties[BucketName] is not of type string\");\r\n    if (!(typeof planId === \"string\")) throw new Error(\"properties[PlanId] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + '/planner/buckets';\r\n\r\n    var data = {\r\n        name: bucketName,\r\n        planId: planId\r\n    };\r\n\r\n    ExecuteRequest(url, JSON.stringify(data), \"POST\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteCreateGroup(parameters: SingleRecord, properties: SingleRecord) {\r\n    CreateNewGroup(parameters, properties, function (a) {\r\n        postResult({\r\n            [GroupId]: a.id,\r\n            [GroupName]: a.displayName,\r\n            [GroupDescription]: a.description,\r\n            [GroupMail]: a.mail,\r\n            [GroupVisibility]: a.visibility\r\n        });\r\n    });\r\n}\r\n\r\nfunction CreateNewGroup(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let groupName = properties[GroupName];\r\n    let groupDesc = properties[GroupDescription];\r\n    let groupVisibility = properties[GroupVisibility];\r\n    let groupMailEnabled = properties[GroupMailEnabled];\r\n    let groupMailNic = properties[GroupMailNickname];\r\n    let groupSecurityEnabled = properties[GroupSecurityEnabled];\r\n    let groupOwnerId = properties[GroupOwnerId];\r\n\r\n\r\n    if (!(typeof groupName === \"string\")) throw new Error(\"properties[GroupName] is not of type string\");\r\n    if (!(typeof groupMailNic === \"string\")) throw new Error(\"properties[GroupMailNickname] is not of type string\");\r\n    if (!(typeof groupOwnerId === \"string\")) throw new Error(\"properties[GroupOwnerId] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + '/groups';\r\n\r\n    var data = {\r\n        displayName: groupName,\r\n        mailEnabled: groupMailEnabled,\r\n        mailNickname: groupMailNic,\r\n        securityEnabled: groupSecurityEnabled,\r\n        description: groupDesc,\r\n        visibility: (groupVisibility != null && groupVisibility != \"\") ? groupVisibility : \"Public\",\r\n        groupTypes: [\"Unified\"],\r\n        \"owners@odata.bind\": [\r\n            `https://graph.microsoft.com/v1.0/users/${groupOwnerId}`\r\n        ]\r\n    };\r\n\r\n    ExecuteRequest(url, JSON.stringify(data), \"POST\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteGetUser(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetGroupUserByEmail(parameters, properties, function (a) {\r\n        postResult({\r\n            [UserId]: a.id,\r\n            [UserDisplayName]: a.displayName,\r\n            [UserEmail]: a.mail,\r\n            [UserGivenName]: a.givenName,\r\n            [UserLastName]: a.surname,\r\n            [UserJobTitle]: a.jobTitle\r\n        });\r\n    });\r\n}\r\n\r\nfunction GetGroupUserByEmail(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let userMail = properties[UserEmail];\r\n\r\n    if (!(typeof userMail === \"string\")) throw new Error(\"properties[UserEmail] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + `/users/${userMail}`;\r\n\r\n    ExecuteRequest(url, null, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteAddUserToGroup(parameters: SingleRecord, properties: SingleRecord) {\r\n    AddUser(parameters, properties, function (a) {\r\n        postResult({});\r\n    });\r\n}\r\n\r\nfunction AddUser(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let groupId = properties[GroupId];\r\n    let userId = properties[UserId];\r\n\r\n    if (!(typeof groupId === \"string\")) throw new Error(\"properties[GroupId] is not of type string\");\r\n    if (!(typeof userId === \"string\")) throw new Error(\"properties[UserId] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + `/groups/${groupId}/members/$ref`;\r\n\r\n    var data = {\r\n        \"@odata.id\": `https://graph.microsoft.com/v1.0/directoryObjects/${userId}`\r\n    };\r\n\r\n    ExecuteRequest(url, JSON.stringify(data), \"POST\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteGetPlans(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetPlans(parameters, properties, function (a) {\r\n        postResult(a.value.map(x => {\r\n            return {\r\n                [PlanId]: x.id,\r\n                [PlanTitle]: x.title\r\n            };\r\n        }));\r\n    });\r\n}\r\n\r\nfunction GetPlans(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let groupId = properties[PlanOwnerGroup];\r\n\r\n    if (!(typeof groupId === \"string\")) throw new Error(\"properties[PlanOwnerGroup] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + `/groups/${groupId}/planner/plans`;\r\n\r\n    ExecuteRequest(url, null, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteGetBuckets(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetBuckets(parameters, properties, function (a) {\r\n        postResult(a.value.map(x => {\r\n            return {\r\n                [BucketId]: x.id,\r\n                [BucketName]: x.name\r\n            };\r\n        }));\r\n    });\r\n}\r\n\r\nfunction GetBuckets(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let planId = properties[PlanId];\r\n\r\n    if (!(typeof planId === \"string\")) throw new Error(\"properties[PlanId] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + `/planner/plans/${planId}/buckets`;\r\n\r\n    ExecuteRequest(url, null, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteCreateTask(parameters: SingleRecord, properties: SingleRecord) {\r\n    CreatePlanTask(parameters, properties, function (a) {\r\n        postResult({\r\n            [TaskId]: a.id\r\n        });\r\n    });\r\n}\r\n\r\nfunction CreatePlanTask(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let planId = properties[PlanId];\r\n    let taskUserId = properties[TaskUserId];\r\n    let taskTitle = properties[TaskTitle];\r\n    let taskDueDate = properties[TaskDueDate] != null && properties[TaskDueDate] != \"\" ? properties[TaskDueDate].toString() : \"\";\r\n    let bucketId = properties[BucketId];\r\n\r\n    if (taskDueDate != \"\") {\r\n        taskDueDate = new Date(taskDueDate).toISOString().split(\"T\")[0];\r\n    }\r\n\r\n    if (!(typeof planId === \"string\")) throw new Error(\"properties[PlanId] is not of type string\");\r\n    if (!(typeof taskUserId === \"string\")) throw new Error(\"properties[TaskUserId] is not of type string\");\r\n    if (!(typeof taskTitle === \"string\")) throw new Error(\"properties[TaskTitle] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + '/planner/tasks';\r\n\r\n    var data = `{\\\"planId\\\":\\\"${planId}\\\",\\\"title\\\":\\\"${taskTitle}\\\",\\\"dueDateTime\\\":\\\"${taskDueDate}\\\",\\\"bucketId\\\":\\\"${bucketId}\\\",\\\"assignments\\\":{\\\"${taskUserId}\\\":{\\\"@odata.type\\\":\\\"#microsoft.graph.plannerAssignment\\\",\\\"orderHint\\\":\\\" !\\\"}}}`;\r\n\r\n    ExecuteRequest(url, data, \"POST\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}","import '@k2oss/k2-broker-core';\r\nimport './index.ts';\r\n\r\nfunction mock(name: string, value: any) {\r\n    global[name] = value;\r\n}\r\n\r\n// This value is obfuscated on purpose. Replace with a valid OAuth token to run\r\nlet OAuthToken = \"\";\r\n\r\nlet schema = null;\r\nmock('postSchema', function (result: any) {\r\n    schema = result;\r\n    console.log(\"postSchema:\");\r\n    console.log(schema);\r\n});\r\n\r\nlet result: any = null;\r\nfunction pr(r: any) {\r\n    result = r;\r\n   // console.log(\"postResult:\")\r\n   // console.log(JSON.stringify(result));\r\n}\r\n\r\nmock('postResult', pr);\r\nlet xhr: { [key: string]: any } = null;\r\nclass XHR {\r\n    public onreadystatechange: () => void;\r\n    public readyState: number;\r\n    public status: number;\r\n    public responseText: string;\r\n    public withCredentials: boolean\r\n\r\n    private recorder: { [key: string]: any };\r\n\r\n    constructor() {\r\n        xhr = this.recorder = {};\r\n        this.recorder.headers = {};\r\n    }\r\n\r\n    open(method: string, url: string) {\r\n        this.recorder.opened = { method, url };\r\n    }\r\n\r\n    setRequestHeader(key: string, value: string) {\r\n        this.recorder.headers[key] = value;\r\n       // console.log(\"setRequestHeader: \" + key + \"=\" + value);\r\n    }\r\n\r\n    send(payload) {\r\n        const request = require('request')\r\n        if (this.withCredentials) {\r\n            this.setRequestHeader(\"Authorization\", \"Bearer \" + OAuthToken);\r\n        }\r\n\r\n        const options = {\r\n            method: this.recorder.opened.method,\r\n            url: this.recorder.opened.url,\r\n            headers: this.recorder.headers,\r\n            body: payload,\r\n            strictSSL: false\r\n        };\r\n       // console.log(\"URL: \" + options.method + \" \" + options.url);\r\n       // console.log(\"BODY: \" + options.body);\r\n        let promise = new Promise((resolve, reject) => {\r\n            try {\r\n                request(options, (error, res, body) => {\r\n                    if (error) {\r\n                        console.error(\"error inside request:\" + error)\r\n                        return\r\n                    }\r\n                    this.responseText = body;\r\n                    this.readyState = 4;\r\n                    this.status = res.statusCode;\r\n                    this.onreadystatechange();\r\n                    resolve(body);\r\n                    delete this.responseText;\r\n                });\r\n            }\r\n            catch (err) {\r\n                console.log(\"error ouside request \" + err);\r\n                reject()\r\n            }\r\n        }).catch((errr) => {\r\n            console.log(\"Promise error:\" + errr);\r\n        });\r\n    }\r\n}\r\n\r\nmock('XMLHttpRequest', XHR);\r\n\r\nonexecute({\r\n    objectName: 'planner',\r\n    methodName: 'createTask',\r\n    properties: {\"planId\":\"GnZjf934ak-rHi4FlkN4gpYABU-w\", \"taskUserId\":\"e1c3de54-1cab-4242-9ac6-584d3447cd5f\", \"taskTitle\":\"Test from K2\", \"bucketId\":\"eIIgM_5w1EyJIIcYi-KbTpYAMHgG\", \"taskDueDate\":\"2021-06-02\"},\r\n    parameters: {},\r\n    configuration: {},\r\n    schema: {}\r\n});\r\n\r\n"],"names":["metadata","systemName","displayName","description","baseUriEndpoint","FileId","PlanId","ExecuteRequest","url","data","requestType","cb","xhr","XMLHttpRequest","onreadystatechange","console","log","status","responseText","readyState","obj","JSON","parse","e","Error","error","code","message","postResult","startswith","open","toUpperCase","withCredentials","setRequestHeader","send","GetItemsByRange","parameters","properties","fileId","sheetName","range","GetUsedRangeItems","mock","name","value","global","ondescribe","postSchema","objects","type","methods","inputs","requiredInputs","outputs","onexecute","objectName","methodName","fileName","filePath","GetDriveFile","a","resultObj","length","id","webUrl","size","Date","createdDateTime","createdBy","user","email","file","mimeType","onexecuteSearchFile","folderName","folderPath","stringify","CreateDriveFolder","onexecuteCreateFolder","onexecuteDrive","address","split","onexecuteGetUsedRange","values","map","x","i","onexecuteUsedRange","count","objArr","text","push","onexecuteGetUsedRangeColumnNames","onexecuteGetRangeColumnNames","GetWorksheets","position","visibility","onexecuteGetWorksheets","onexecuteGetRangeItems","rowCount","columnCount","GetCellValue","onexecuteGetCell","index","GetItemsByUsedRangeRow","onexecuteGetUsedRangeRow","GetItemsByRangeRow","onexecuteGetRangeRow","onexecuteExcel","mail","groupName","groupDesc","groupVisibility","groupMailEnabled","groupMailNic","groupSecurityEnabled","groupOwnerId","mailEnabled","mailNickname","securityEnabled","groupTypes","CreateNewGroup","onexecuteCreateGroup","groupId","userId","AddUser","onexecuteAddUserToGroup","onexecuteGroup","planTitle","planGroup","title","owner","CreatePlannerPlan","onexecuteCreatePlan","bucketName","planId","CreatePlannerPlanBucket","onexecuteCreateBucket","GetPlans","onexecuteGetPlans","GetBuckets","onexecuteGetBuckets","taskUserId","taskTitle","taskDueDate","toString","bucketId","toISOString","CreatePlanTask","onexecuteCreateTask","onexecutePlanner","userMail","GetGroupUserByEmail","givenName","surname","jobTitle","onexecuteGetUser","onexecuteUser","schema","result","r","constructor","this","recorder","headers","method","opened","key","payload","request","require","options","body","strictSSL","Promise","resolve","reject","res","statusCode","err","catch","errr","configuration"],"mappings":"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"}