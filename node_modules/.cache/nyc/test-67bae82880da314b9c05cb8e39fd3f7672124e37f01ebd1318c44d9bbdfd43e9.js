"use strict";function cov_14ybkxocrq(){var path="C:\\Users\\ernie.hayter\\Dropbox\\Documentation\\Work\\TS\\Technical\\POC\\Teams\\Microsoft-Teams-Connector\\dist\\test.js";var hash="60a365eed053402b288d576e8aabfd3f87093327";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\ernie.hayter\\Dropbox\\Documentation\\Work\\TS\\Technical\\POC\\Teams\\Microsoft-Teams-Connector\\dist\\test.js",statementMap:{"0":{start:{line:1,column:19},end:{line:1,column:33}},"1":{start:{line:1,column:48},end:{line:1,column:105}},"2":{start:{line:1,column:106},end:{line:1,column:173}},"3":{start:{line:1,column:179},end:{line:1,column:183}},"4":{start:{line:1,column:200},end:{line:1,column:211}},"5":{start:{line:1,column:226},end:{line:1,column:556}},"6":{start:{line:1,column:265},end:{line:1,column:306}},"7":{start:{line:1,column:317},end:{line:1,column:354}},"8":{start:{line:1,column:377},end:{line:1,column:403}},"9":{start:{line:1,column:411},end:{line:1,column:553}},"10":{start:{line:1,column:431},end:{line:1,column:551}},"11":{start:{line:1,column:557},end:{line:1,column:3247}},"12":{start:{line:1,column:608},end:{line:1,column:667}},"13":{start:{line:1,column:629},end:{line:1,column:664}},"14":{start:{line:1,column:735},end:{line:1,column:739}},"15":{start:{line:1,column:742},end:{line:1,column:753}},"16":{start:{line:1,column:756},end:{line:1,column:771}},"17":{start:{line:1,column:772},end:{line:1,column:777}},"18":{start:{line:1,column:783},end:{line:1,column:787}},"19":{start:{line:1,column:788},end:{line:1,column:940}},"20":{start:{line:1,column:816},end:{line:1,column:819}},"21":{start:{line:1,column:1010},end:{line:1,column:1014}},"22":{start:{line:1,column:1017},end:{line:1,column:1030}},"23":{start:{line:1,column:1033},end:{line:1,column:1048}},"24":{start:{line:1,column:1049},end:{line:1,column:1054}},"25":{start:{line:1,column:1060},end:{line:1,column:1064}},"26":{start:{line:1,column:1065},end:{line:1,column:1217}},"27":{start:{line:1,column:1093},end:{line:1,column:1096}},"28":{start:{line:1,column:1283},end:{line:1,column:1287}},"29":{start:{line:1,column:1290},end:{line:1,column:1299}},"30":{start:{line:1,column:1302},end:{line:1,column:1419}},"31":{start:{line:1,column:1420},end:{line:1,column:1425}},"32":{start:{line:1,column:1431},end:{line:1,column:1435}},"33":{start:{line:1,column:1436},end:{line:1,column:1587}},"34":{start:{line:1,column:1464},end:{line:1,column:1467}},"35":{start:{line:1,column:1654},end:{line:1,column:1658}},"36":{start:{line:1,column:1661},end:{line:1,column:1671}},"37":{start:{line:1,column:1674},end:{line:1,column:2154}},"38":{start:{line:1,column:2155},end:{line:1,column:2160}},"39":{start:{line:1,column:2166},end:{line:1,column:2170}},"40":{start:{line:1,column:2171},end:{line:1,column:2279}},"41":{start:{line:1,column:2199},end:{line:1,column:2202}},"42":{start:{line:1,column:2349},end:{line:1,column:2356}},"43":{start:{line:1,column:2359},end:{line:1,column:2372}},"44":{start:{line:1,column:2375},end:{line:1,column:2483}},"45":{start:{line:1,column:2484},end:{line:1,column:2489}},"46":{start:{line:1,column:2495},end:{line:1,column:2499}},"47":{start:{line:1,column:2500},end:{line:1,column:2611}},"48":{start:{line:1,column:2528},end:{line:1,column:2531}},"49":{start:{line:1,column:2681},end:{line:1,column:2688}},"50":{start:{line:1,column:2691},end:{line:1,column:2704}},"51":{start:{line:1,column:2707},end:{line:1,column:2744}},"52":{start:{line:1,column:2745},end:{line:1,column:2750}},"53":{start:{line:1,column:2756},end:{line:1,column:2760}},"54":{start:{line:1,column:2761},end:{line:1,column:2872}},"55":{start:{line:1,column:2789},end:{line:1,column:2792}},"56":{start:{line:1,column:2955},end:{line:1,column:2962}},"57":{start:{line:1,column:2965},end:{line:1,column:2983}},"58":{start:{line:1,column:2986},end:{line:1,column:3116}},"59":{start:{line:1,column:3117},end:{line:1,column:3122}},"60":{start:{line:1,column:3128},end:{line:1,column:3132}},"61":{start:{line:1,column:3133},end:{line:1,column:3244}},"62":{start:{line:1,column:3161},end:{line:1,column:3164}}},fnMap:{"0":{name:"a",decl:{start:{line:1,column:43},end:{line:1,column:44}},loc:{start:{line:1,column:47},end:{line:1,column:106}},line:1},"1":{name:"t",decl:{start:{line:1,column:193},end:{line:1,column:194}},loc:{start:{line:1,column:199},end:{line:1,column:212}},line:1},"2":{name:"l",decl:{start:{line:1,column:221},end:{line:1,column:222}},loc:{start:{line:1,column:225},end:{line:1,column:557}},line:1},"3":{name:"(anonymous_3)",decl:{start:{line:1,column:251},end:{line:1,column:252}},loc:{start:{line:1,column:264},end:{line:1,column:307}},line:1},"4":{name:"(anonymous_4)",decl:{start:{line:1,column:307},end:{line:1,column:308}},loc:{start:{line:1,column:316},end:{line:1,column:355}},line:1},"5":{name:"(anonymous_5)",decl:{start:{line:1,column:355},end:{line:1,column:356}},loc:{start:{line:1,column:376},end:{line:1,column:404}},line:1},"6":{name:"(anonymous_6)",decl:{start:{line:1,column:404},end:{line:1,column:405}},loc:{start:{line:1,column:410},end:{line:1,column:554}},line:1},"7":{name:"(anonymous_7)",decl:{start:{line:1,column:426},end:{line:1,column:427}},loc:{start:{line:1,column:430},end:{line:1,column:552}},line:1},"8":{name:"(anonymous_8)",decl:{start:{line:1,column:604},end:{line:1,column:605}},loc:{start:{line:1,column:607},end:{line:1,column:668}},line:1},"9":{name:"(anonymous_9)",decl:{start:{line:1,column:618},end:{line:1,column:619}},loc:{start:{line:1,column:628},end:{line:1,column:665}},line:1},"10":{name:"(anonymous_10)",decl:{start:{line:1,column:719},end:{line:1,column:720}},loc:{start:{line:1,column:728},end:{line:1,column:941}},line:1},"11":{name:"(anonymous_11)",decl:{start:{line:1,column:804},end:{line:1,column:805}},loc:{start:{line:1,column:815},end:{line:1,column:820}},line:1},"12":{name:"(anonymous_12)",decl:{start:{line:1,column:994},end:{line:1,column:995}},loc:{start:{line:1,column:1003},end:{line:1,column:1218}},line:1},"13":{name:"(anonymous_13)",decl:{start:{line:1,column:1081},end:{line:1,column:1082}},loc:{start:{line:1,column:1092},end:{line:1,column:1097}},line:1},"14":{name:"(anonymous_14)",decl:{start:{line:1,column:1267},end:{line:1,column:1268}},loc:{start:{line:1,column:1276},end:{line:1,column:1588}},line:1},"15":{name:"(anonymous_15)",decl:{start:{line:1,column:1452},end:{line:1,column:1453}},loc:{start:{line:1,column:1463},end:{line:1,column:1468}},line:1},"16":{name:"(anonymous_16)",decl:{start:{line:1,column:1638},end:{line:1,column:1639}},loc:{start:{line:1,column:1647},end:{line:1,column:2280}},line:1},"17":{name:"(anonymous_17)",decl:{start:{line:1,column:2187},end:{line:1,column:2188}},loc:{start:{line:1,column:2198},end:{line:1,column:2203}},line:1},"18":{name:"(anonymous_18)",decl:{start:{line:1,column:2333},end:{line:1,column:2334}},loc:{start:{line:1,column:2342},end:{line:1,column:2612}},line:1},"19":{name:"(anonymous_19)",decl:{start:{line:1,column:2516},end:{line:1,column:2517}},loc:{start:{line:1,column:2527},end:{line:1,column:2532}},line:1},"20":{name:"(anonymous_20)",decl:{start:{line:1,column:2665},end:{line:1,column:2666}},loc:{start:{line:1,column:2674},end:{line:1,column:2873}},line:1},"21":{name:"(anonymous_21)",decl:{start:{line:1,column:2777},end:{line:1,column:2778}},loc:{start:{line:1,column:2788},end:{line:1,column:2793}},line:1},"22":{name:"(anonymous_22)",decl:{start:{line:1,column:2939},end:{line:1,column:2940}},loc:{start:{line:1,column:2948},end:{line:1,column:3245}},line:1},"23":{name:"(anonymous_23)",decl:{start:{line:1,column:3149},end:{line:1,column:3150}},loc:{start:{line:1,column:3160},end:{line:1,column:3165}},line:1}},branchMap:{"0":{loc:{start:{line:1,column:55},end:{line:1,column:105}},type:"cond-expr",locations:[{start:{line:1,column:92},end:{line:1,column:93}},{start:{line:1,column:94},end:{line:1,column:105}}],line:1},"1":{loc:{start:{line:1,column:55},end:{line:1,column:91}},type:"binary-expr",locations:[{start:{line:1,column:55},end:{line:1,column:56}},{start:{line:1,column:58},end:{line:1,column:76}},{start:{line:1,column:78},end:{line:1,column:91}}],line:1}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0},b:{"0":[0,0],"1":[0,0,0]},inputSourceMap:{version:3,file:"test.js",sources:["../src/test.ts"],sourcesContent:["import test from 'ava';\r\nimport '@k2oss/k2-broker-core/test-framework';\r\nimport './index';\r\n\r\n\r\n//\r\n// WARNING: any tests that use this mock() must be run serially\r\n// (using test.serial()), because they modify global  !\r\nfunction mock(name: string, value: any) \r\n{\r\n    global[name] = value;\r\n}\r\n\r\n// helper method to pass the data which is dynamic to each test into the mocked XHR class object.\r\n// uses mock() so must only be used in test.serial()'y run tests\r\nfunction mockXHR(data){\r\n    let xhr: {[key:string]: any} = null;\r\n    class XHR {\r\n        public onreadystatechange: () => void;\r\n        public readyState: number;\r\n        public status: number;\r\n        public responseText: string;\r\n        private recorder: {[key:string]: any};\r\n\r\n        constructor() {\r\n            xhr = this.recorder = {};\r\n            this.recorder.headers = {};\r\n        }\r\n\r\n        open(method: string, url: string) {\r\n            this.recorder.opened = {method, url};\r\n        }\r\n\r\n        setRequestHeader(key: string, value: string) {\r\n            this.recorder.headers[key] = value;\r\n        }\r\n\r\n        send() {\r\n            queueMicrotask(() =>\r\n            {\r\n                this.readyState = 4;\r\n                this.status = 200;\r\n                // this.responseText = JSON.stringify({\r\n                //     \"id\": 4321,\r\n                //     \"requestStatusUrl\": undefined,\r\n                //     \"isSuccessful\": true\r\n                // });\r\n                this.responseText = JSON.stringify(data);\r\n                this.onreadystatechange();\r\n                delete this.responseText;\r\n            });\r\n        }\r\n    }\r\n\r\n    mock('XMLHttpRequest', XHR);\r\n}\r\n\r\ntest('onexecute fails for invalid object', t => {\r\n    t.throws(function () {\r\n        let obj = 'invalidObject';\r\n        onexecute(obj, '', {}, {});\r\n    });\r\n});\r\n\r\n//\r\n// // example of how to catch a throw exception\r\n// const promise = () => Promise.reject(new Error('TEST'));\r\n// test('rejects', async t => {\r\n//     const error = await t.throwsAsync(promise);\r\n//     t.is(error.message, 'TEST');\r\n// });\r\n\r\ntest.serial('onexecuteTeamArchive succeeds', async t => {\r\n    //\r\n    // note: inputs/outputs found index.ts ondescribe \"postSchema()\" method\r\n\r\n    let validObject = Team;\r\n    let method = TeamArchive;\r\n\r\n    let data = {\r\n        [TeamId]: 1234\r\n    };\r\n    mockXHR(data);\r\n\r\n    let result: any = null;\r\n    function pr(r: any) {\r\n        result = r;\r\n    }\r\n\r\n    mock('postResult', pr);\r\n\r\n    await onexecute(validObject, method, {}, data);\r\n\r\n    // t.deepEqual(xhr, {\r\n    //     opened: {\r\n    //         method: 'GET',\r\n    //         url: 'https://jsonplaceholder.typicode.com/todos/123'\r\n    //     },\r\n    //     headers: {\r\n    //         'test': 'test value'\r\n    //     }\r\n    // });\r\n\r\n    t.deepEqual(result, {\r\n        [TeamId]: 1234,\r\n        [TeamRequestStatusUrl]: undefined,\r\n        [TeamIsSuccessful]: true\r\n    });\r\n\r\n    t.pass();\r\n});\r\n\r\ntest.serial('onexecuteTeamUnarchive succeeds', async t => {\r\n    //\r\n    // note: inputs/outputs found index.ts ondescribe \"postSchema()\" method\r\n\r\n    let teamId = 4321;\r\n    let validObject = Team;\r\n    let method = TeamUnarchive;\r\n\r\n    let data = {\r\n        [TeamId]: teamId\r\n    };\r\n    mockXHR(data);\r\n\r\n    let result: any = null;\r\n    function pr(r: any) { result = r;  }\r\n    mock('postResult', pr);\r\n\r\n    await onexecute(validObject, method, {}, data);\r\n\r\n    t.deepEqual(result, {\r\n        [TeamId]: teamId,\r\n        [TeamRequestStatusUrl]: undefined,\r\n        [TeamIsSuccessful]: true\r\n    });\r\n\r\n    t.pass();\r\n});\r\n\r\ntest.serial('onexecuteTeamClone succeeds', async t => {\r\n    //\r\n    // note: inputs/outputs found index.ts ondescribe \"postSchema()\" method\r\n\r\n    let validObject = Team;\r\n    let method = TeamClone;\r\n\r\n    let teamId = 999;\r\n    let data = {\r\n        [TeamId]: teamId,\r\n        [TeamDisplayName]: \"SomeName\",\r\n        [TeamDescription]: \"SomeDescription\",\r\n        [TeamMailNickname]: \"SomeMailNickname\"\r\n    };\r\n    mockXHR(data);\r\n\r\n    let result: any = null;\r\n    function pr(r: any) { result = r;  }\r\n    mock('postResult', pr);\r\n\r\n    await onexecute(validObject, method, {}, data);\r\n\r\n    t.deepEqual(result,{\r\n        [TeamId]: teamId,\r\n        [TeamRequestStatusUrl]: undefined,\r\n        [TeamIsSuccessful]: true\r\n    });\r\n\r\n    t.pass();\r\n});\r\n\r\ntest.serial('onexecuteTeamUpdate succeeds', async t => {\r\n    //\r\n    // note: inputs/outputs found index.ts ondescribe \"postSchema()\" method\r\n\r\n    let validObject = Team;\r\n    let method = TeamUpdate;\r\n\r\n    let teamId = 555;\r\n    let data = {\r\n        [TeamId]: teamId,\r\n        [TeamMsAllowCreateUpdateChannels]: true,\r\n        [TeamMsAllowDeleteChannels]: true,\r\n        [TeamMsAllowAddRemoveApps]: true,\r\n        [TeamMsAllowCreateUpdateRemoveTabs]: true,\r\n        [TeamMsAllowCreateUpdateRemoveConnectors]: true,\r\n        [TeamGsAllowCreateUpdateChannels]: true,\r\n        [TeamGsAllowDeleteChannels]: true,\r\n        [TeamMsgAllowUserEditMessages]: true,\r\n        [TeamMsgAllowUserDeleteMessages]: true,\r\n        [TeamMsgAllowTeamMentions]: true,\r\n        [TeamMsgAllowChannelMentions]: true,\r\n        [TeamFsAllowGiphy]: true,\r\n        [TeamFsAllowStickersAndMemes]: true,\r\n        [TeamFsAllowCustomMemes]: true\r\n    };\r\n    mockXHR(data);\r\n\r\n    let result: any = null;\r\n    function pr(r: any) { result = r;  }\r\n    mock('postResult', pr);\r\n\r\n    await onexecute(validObject, method, {}, data);\r\n\r\n    t.deepEqual(result,{\r\n        [TeamIsSuccessful]: true\r\n    });\r\n\r\n    t.pass();\r\n});\r\n\r\ntest.serial('onexecuteChannelUpdate succeeds', async t => {\r\n    //\r\n    // note: inputs/outputs found index.ts ondescribe \"postSchema()\" method\r\n\r\n    let validObject = Channel;\r\n    let method = ChannelUpdate;\r\n\r\n    let channelId = 777;\r\n    let teamId = 888;\r\n    let data = {\r\n        [ChannelId]: channelId,\r\n        [ChannelTeamId]: teamId,\r\n        [ChannelDisplayName]: \"SomeName\",\r\n        [ChannelDescription]: \"SomeDescription\"\r\n    };\r\n    mockXHR(data);\r\n\r\n    let result: any = null;\r\n    function pr(r: any) { result = r;  }\r\n    mock('postResult', pr);\r\n\r\n    await onexecute(validObject, method, {}, data);\r\n\r\n    t.deepEqual(result,{\r\n        [ChannelIsSuccessful]: true\r\n    });\r\n\r\n    t.pass();\r\n});\r\n\r\ntest.serial('onexecuteChannelDelete succeeds', async t => {\r\n    //\r\n    // note: inputs/outputs found index.ts ondescribe \"postSchema()\" method\r\n\r\n    let validObject = Channel;\r\n    let method = ChannelDelete;\r\n\r\n    let channelId = 345;\r\n    let teamId = 100;\r\n    let data = {\r\n        [ChannelId]: channelId,\r\n        [ChannelTeamId]: teamId\r\n    };\r\n    mockXHR(data);\r\n\r\n    let result: any = null;\r\n    function pr(r: any) { result = r;  }\r\n    mock('postResult', pr);\r\n\r\n    await onexecute(validObject, method, {}, data);\r\n\r\n    t.deepEqual(result,{\r\n        [ChannelIsSuccessful]: true\r\n    });\r\n\r\n    t.pass();\r\n});\r\n\r\ntest.serial('onexecuteSendMessage (of a Channel) succeeds', async t => {\r\n    //\r\n    // note: inputs/outputs found index.ts ondescribe \"postSchema()\" method\r\n\r\n    let validObject = Channel;\r\n    let method = ChannelSendMessage;\r\n\r\n    let channelId = 345;\r\n    let teamId = 100;\r\n    let data = {\r\n        [ChannelId]: channelId,\r\n        [ChannelTeamId]: teamId,\r\n        [ChannelMessageSubject]: \"subject\",\r\n        [ChannelMessageBody]: \"body\",\r\n        [ChannelMessageIsImportant]: true\r\n    };\r\n    mockXHR(data);\r\n\r\n    let result: any = null;\r\n    function pr(r: any) { result = r;  }\r\n    mock('postResult', pr);\r\n\r\n    await onexecute(validObject, method, {}, data);\r\n\r\n    t.deepEqual(result,{\r\n        [ChannelIsSuccessful]: true\r\n    });\r\n\r\n    t.pass();\r\n});"],names:["mock","name","value","global","mockXHR","data","constructor","this","recorder","headers","open","method","url","opened","setRequestHeader","key","send","queueMicrotask","readyState","status","responseText","JSON","stringify","onreadystatechange","test","t","throws","onexecute","serial","async","validObject","Team","TeamArchive","TeamId","result","r","deepEqual","TeamRequestStatusUrl","undefined","TeamIsSuccessful","pass","TeamUnarchive","TeamClone","TeamDisplayName","TeamDescription","TeamMailNickname","TeamUpdate","TeamMsAllowCreateUpdateChannels","TeamMsAllowDeleteChannels","TeamMsAllowAddRemoveApps","TeamMsAllowCreateUpdateRemoveTabs","TeamMsAllowCreateUpdateRemoveConnectors","TeamGsAllowCreateUpdateChannels","TeamGsAllowDeleteChannels","TeamMsgAllowUserEditMessages","TeamMsgAllowUserDeleteMessages","TeamMsgAllowTeamMentions","TeamMsgAllowChannelMentions","TeamFsAllowGiphy","TeamFsAllowStickersAndMemes","TeamFsAllowCustomMemes","Channel","ChannelUpdate","ChannelId","ChannelTeamId","ChannelDisplayName","ChannelDescription","ChannelIsSuccessful","ChannelDelete","ChannelSendMessage","ChannelMessageSubject","ChannelMessageBody","ChannelMessageIsImportant"],mappings:"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"},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"60a365eed053402b288d576e8aabfd3f87093327"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_14ybkxocrq=function(){return actualCoverage;};}return actualCoverage;}cov_14ybkxocrq();var e=(cov_14ybkxocrq().s[0]++,require("ava"));function a(e){cov_14ybkxocrq().f[0]++;cov_14ybkxocrq().s[1]++;return(cov_14ybkxocrq().b[1][0]++,e)&&(cov_14ybkxocrq().b[1][1]++,"object"==typeof e)&&(cov_14ybkxocrq().b[1][2]++,"default"in e)?(cov_14ybkxocrq().b[0][0]++,e):(cov_14ybkxocrq().b[0][1]++,{default:e});}cov_14ybkxocrq().s[2]++;require("@k2oss/k2-broker-core/test-framework"),require("./index");var s=(cov_14ybkxocrq().s[3]++,a(e));function t(e,a){cov_14ybkxocrq().f[1]++;cov_14ybkxocrq().s[4]++;global[e]=a;}function l(e){cov_14ybkxocrq().f[2]++;cov_14ybkxocrq().s[5]++;t("XMLHttpRequest",class{constructor(){cov_14ybkxocrq().f[3]++;cov_14ybkxocrq().s[6]++;this.recorder={},this.recorder.headers={};}open(e,a){cov_14ybkxocrq().f[4]++;cov_14ybkxocrq().s[7]++;this.recorder.opened={method:e,url:a};}setRequestHeader(e,a){cov_14ybkxocrq().f[5]++;cov_14ybkxocrq().s[8]++;this.recorder.headers[e]=a;}send(){cov_14ybkxocrq().f[6]++;cov_14ybkxocrq().s[9]++;queueMicrotask(()=>{cov_14ybkxocrq().f[7]++;cov_14ybkxocrq().s[10]++;this.readyState=4,this.status=200,this.responseText=JSON.stringify(e),this.onreadystatechange(),delete this.responseText;});}});}cov_14ybkxocrq().s[11]++;s.default("onexecute fails for invalid object",e=>{cov_14ybkxocrq().f[8]++;cov_14ybkxocrq().s[12]++;e.throws(function(){cov_14ybkxocrq().f[9]++;cov_14ybkxocrq().s[13]++;onexecute("invalidObject","",{},{});});}),s.default.serial("onexecuteTeamArchive succeeds",async e=>{cov_14ybkxocrq().f[10]++;let a=(cov_14ybkxocrq().s[14]++,Team),s=(cov_14ybkxocrq().s[15]++,TeamArchive),n=(cov_14ybkxocrq().s[16]++,{[TeamId]:1234});cov_14ybkxocrq().s[17]++;l(n);let u=(cov_14ybkxocrq().s[18]++,null);cov_14ybkxocrq().s[19]++;t("postResult",function(e){cov_14ybkxocrq().f[11]++;cov_14ybkxocrq().s[20]++;u=e;}),await onexecute(a,s,{},n),e.deepEqual(u,{[TeamId]:1234,[TeamRequestStatusUrl]:void 0,[TeamIsSuccessful]:!0}),e.pass();}),s.default.serial("onexecuteTeamUnarchive succeeds",async e=>{cov_14ybkxocrq().f[12]++;let a=(cov_14ybkxocrq().s[21]++,Team),s=(cov_14ybkxocrq().s[22]++,TeamUnarchive),n=(cov_14ybkxocrq().s[23]++,{[TeamId]:4321});cov_14ybkxocrq().s[24]++;l(n);let u=(cov_14ybkxocrq().s[25]++,null);cov_14ybkxocrq().s[26]++;t("postResult",function(e){cov_14ybkxocrq().f[13]++;cov_14ybkxocrq().s[27]++;u=e;}),await onexecute(a,s,{},n),e.deepEqual(u,{[TeamId]:4321,[TeamRequestStatusUrl]:void 0,[TeamIsSuccessful]:!0}),e.pass();}),s.default.serial("onexecuteTeamClone succeeds",async e=>{cov_14ybkxocrq().f[14]++;let a=(cov_14ybkxocrq().s[28]++,Team),s=(cov_14ybkxocrq().s[29]++,TeamClone),n=(cov_14ybkxocrq().s[30]++,{[TeamId]:999,[TeamDisplayName]:"SomeName",[TeamDescription]:"SomeDescription",[TeamMailNickname]:"SomeMailNickname"});cov_14ybkxocrq().s[31]++;l(n);let u=(cov_14ybkxocrq().s[32]++,null);cov_14ybkxocrq().s[33]++;t("postResult",function(e){cov_14ybkxocrq().f[15]++;cov_14ybkxocrq().s[34]++;u=e;}),await onexecute(a,s,{},n),e.deepEqual(u,{[TeamId]:999,[TeamRequestStatusUrl]:void 0,[TeamIsSuccessful]:!0}),e.pass();}),s.default.serial("onexecuteTeamUpdate succeeds",async e=>{cov_14ybkxocrq().f[16]++;let a=(cov_14ybkxocrq().s[35]++,Team),s=(cov_14ybkxocrq().s[36]++,TeamUpdate),n=(cov_14ybkxocrq().s[37]++,{[TeamId]:555,[TeamMsAllowCreateUpdateChannels]:!0,[TeamMsAllowDeleteChannels]:!0,[TeamMsAllowAddRemoveApps]:!0,[TeamMsAllowCreateUpdateRemoveTabs]:!0,[TeamMsAllowCreateUpdateRemoveConnectors]:!0,[TeamGsAllowCreateUpdateChannels]:!0,[TeamGsAllowDeleteChannels]:!0,[TeamMsgAllowUserEditMessages]:!0,[TeamMsgAllowUserDeleteMessages]:!0,[TeamMsgAllowTeamMentions]:!0,[TeamMsgAllowChannelMentions]:!0,[TeamFsAllowGiphy]:!0,[TeamFsAllowStickersAndMemes]:!0,[TeamFsAllowCustomMemes]:!0});cov_14ybkxocrq().s[38]++;l(n);let u=(cov_14ybkxocrq().s[39]++,null);cov_14ybkxocrq().s[40]++;t("postResult",function(e){cov_14ybkxocrq().f[17]++;cov_14ybkxocrq().s[41]++;u=e;}),await onexecute(a,s,{},n),e.deepEqual(u,{[TeamIsSuccessful]:!0}),e.pass();}),s.default.serial("onexecuteChannelUpdate succeeds",async e=>{cov_14ybkxocrq().f[18]++;let a=(cov_14ybkxocrq().s[42]++,Channel),s=(cov_14ybkxocrq().s[43]++,ChannelUpdate),n=(cov_14ybkxocrq().s[44]++,{[ChannelId]:777,[ChannelTeamId]:888,[ChannelDisplayName]:"SomeName",[ChannelDescription]:"SomeDescription"});cov_14ybkxocrq().s[45]++;l(n);let u=(cov_14ybkxocrq().s[46]++,null);cov_14ybkxocrq().s[47]++;t("postResult",function(e){cov_14ybkxocrq().f[19]++;cov_14ybkxocrq().s[48]++;u=e;}),await onexecute(a,s,{},n),e.deepEqual(u,{[ChannelIsSuccessful]:!0}),e.pass();}),s.default.serial("onexecuteChannelDelete succeeds",async e=>{cov_14ybkxocrq().f[20]++;let a=(cov_14ybkxocrq().s[49]++,Channel),s=(cov_14ybkxocrq().s[50]++,ChannelDelete),n=(cov_14ybkxocrq().s[51]++,{[ChannelId]:345,[ChannelTeamId]:100});cov_14ybkxocrq().s[52]++;l(n);let u=(cov_14ybkxocrq().s[53]++,null);cov_14ybkxocrq().s[54]++;t("postResult",function(e){cov_14ybkxocrq().f[21]++;cov_14ybkxocrq().s[55]++;u=e;}),await onexecute(a,s,{},n),e.deepEqual(u,{[ChannelIsSuccessful]:!0}),e.pass();}),s.default.serial("onexecuteSendMessage (of a Channel) succeeds",async e=>{cov_14ybkxocrq().f[22]++;let a=(cov_14ybkxocrq().s[56]++,Channel),s=(cov_14ybkxocrq().s[57]++,ChannelSendMessage),n=(cov_14ybkxocrq().s[58]++,{[ChannelId]:345,[ChannelTeamId]:100,[ChannelMessageSubject]:"subject",[ChannelMessageBody]:"body",[ChannelMessageIsImportant]:!0});cov_14ybkxocrq().s[59]++;l(n);let u=(cov_14ybkxocrq().s[60]++,null);cov_14ybkxocrq().s[61]++;t("postResult",function(e){cov_14ybkxocrq().f[23]++;cov_14ybkxocrq().s[62]++;u=e;}),await onexecute(a,s,{},n),e.deepEqual(u,{[ChannelIsSuccessful]:!0}),e.pass();});//# sourceMappingURL=test.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,